# Generated from test.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0089")
        buf.write("\u04aa\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\3\2\7\2\u00c8\n\2\f\2\16")
        buf.write("\2\u00cb\13\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\5\3\u00d7\n\3\3\4\3\4\3\4\7\4\u00dc\n\4\f\4\16\4\u00df")
        buf.write("\13\4\3\5\3\5\3\5\5\5\u00e4\n\5\3\5\3\5\3\6\3\6\5\6\u00ea")
        buf.write("\n\6\3\6\3\6\7\6\u00ee\n\6\f\6\16\6\u00f1\13\6\3\6\3\6")
        buf.write("\3\6\3\7\3\7\3\b\3\b\3\t\5\t\u00fb\n\t\3\t\5\t\u00fe\n")
        buf.write("\t\3\n\3\n\3\n\3\n\7\n\u0104\n\n\f\n\16\n\u0107\13\n\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u010d\n\13\3\13\3\13\5\13\u0111")
        buf.write("\n\13\3\f\3\f\3\r\3\r\3\16\3\16\5\16\u0119\n\16\3\17\3")
        buf.write("\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\7\22\u0127\n\22\f\22\16\22\u012a\13\22\3\22\5\22\u012d")
        buf.write("\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\7\23\u0139\n\23\f\23\16\23\u013c\13\23\3\23\3\23\5\23")
        buf.write("\u0140\n\23\3\23\3\23\3\23\7\23\u0145\n\23\f\23\16\23")
        buf.write("\u0148\13\23\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3")
        buf.write("\26\3\26\7\26\u0154\n\26\f\26\16\26\u0157\13\26\3\27\5")
        buf.write("\27\u015a\n\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\7\30\u0164\n\30\f\30\16\30\u0167\13\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\31\7\31\u016f\n\31\f\31\16\31\u0172\13\31")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u017a\n\32\3\33\3")
        buf.write("\33\3\33\3\33\7\33\u0180\n\33\f\33\16\33\u0183\13\33\3")
        buf.write("\34\3\34\3\34\7\34\u0188\n\34\f\34\16\34\u018b\13\34\3")
        buf.write("\34\3\34\3\34\3\35\3\35\3\35\7\35\u0193\n\35\f\35\16\35")
        buf.write("\u0196\13\35\3\35\3\35\3\35\5\35\u019b\n\35\3\35\5\35")
        buf.write("\u019e\n\35\3\35\5\35\u01a1\n\35\3\36\5\36\u01a4\n\36")
        buf.write("\3\36\5\36\u01a7\n\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3 \3!\3!\3!\3!\3\"\3\"\3\"\3\"\5\"\u01ba\n\"\3\"\3\"")
        buf.write("\3\"\3\"\5\"\u01c0\n\"\3\"\5\"\u01c3\n\"\3\"\3\"\3#\3")
        buf.write("#\3$\3$\3$\3$\7$\u01cd\n$\f$\16$\u01d0\13$\5$\u01d2\n")
        buf.write("$\3$\3$\3%\3%\3%\3%\7%\u01da\n%\f%\16%\u01dd\13%\5%\u01df")
        buf.write("\n%\3%\3%\3&\3&\3&\3&\7&\u01e7\n&\f&\16&\u01ea\13&\3&")
        buf.write("\3&\3\'\3\'\3\'\3(\3(\3(\3(\3(\5(\u01f6\n(\3(\5(\u01f9")
        buf.write("\n(\3(\3(\3(\3(\7(\u01ff\n(\f(\16(\u0202\13(\3(\3(\5(")
        buf.write("\u0206\n(\5(\u0208\n(\3)\3)\3)\3)\5)\u020e\n)\3*\5*\u0211")
        buf.write("\n*\3*\5*\u0214\n*\3*\5*\u0217\n*\3+\3+\3+\3+\7+\u021d")
        buf.write("\n+\f+\16+\u0220\13+\3,\3,\3,\3,\7,\u0226\n,\f,\16,\u0229")
        buf.write("\13,\3-\3-\3-\3-\7-\u022f\n-\f-\16-\u0232\13-\3-\3-\3")
        buf.write(".\3.\3.\3.\3.\3.\5.\u023c\n.\3/\3/\3/\3/\3\60\3\60\3\60")
        buf.write("\7\60\u0245\n\60\f\60\16\60\u0248\13\60\3\60\3\60\5\60")
        buf.write("\u024c\n\60\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\5\62\u0258\n\62\3\63\3\63\5\63\u025c\n\63\3\64")
        buf.write("\3\64\3\64\3\65\3\65\3\65\5\65\u0264\n\65\3\65\3\65\3")
        buf.write("\65\3\65\7\65\u026a\n\65\f\65\16\65\u026d\13\65\3\65\3")
        buf.write("\65\3\65\5\65\u0272\n\65\3\66\3\66\3\66\3\67\3\67\7\67")
        buf.write("\u0279\n\67\f\67\16\67\u027c\13\67\3\67\3\67\38\38\58")
        buf.write("\u0282\n8\38\38\58\u0286\n8\39\39\39\39\39\59\u028d\n")
        buf.write("9\39\39\39\59\u0292\n9\3:\3:\3:\3:\3:\3:\3:\3:\6:\u029c")
        buf.write("\n:\r:\16:\u029d\3;\3;\5;\u02a2\n;\3;\6;\u02a5\n;\r;\16")
        buf.write(";\u02a6\3<\5<\u02aa\n<\3<\5<\u02ad\n<\3<\3<\3<\3<\3<\3")
        buf.write("<\6<\u02b5\n<\r<\16<\u02b6\5<\u02b9\n<\3<\3<\3<\3<\3<")
        buf.write("\7<\u02c0\n<\f<\16<\u02c3\13<\3<\3<\5<\u02c7\n<\3<\3<")
        buf.write("\3<\5<\u02cc\n<\5<\u02ce\n<\3=\3=\3=\3=\3>\5>\u02d5\n")
        buf.write(">\3>\3>\3?\3?\3?\3?\3?\7?\u02de\n?\f?\16?\u02e1\13?\3")
        buf.write("?\5?\u02e4\n?\3?\3?\5?\u02e8\n?\3@\3@\3@\3@\3A\3A\3A\3")
        buf.write("B\3B\3B\3B\5B\u02f5\nB\3C\3C\3C\5C\u02fa\nC\3C\3C\3C\5")
        buf.write("C\u02ff\nC\3C\7C\u0302\nC\fC\16C\u0305\13C\3C\3C\3C\3")
        buf.write("C\5C\u030b\nC\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0316\nD\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0324\nE\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u0345\nE\fE\16E\u0348")
        buf.write("\13E\3F\3F\5F\u034c\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0357")
        buf.write("\nF\3G\3G\3G\3G\5G\u035d\nG\3H\3H\3H\3H\3I\3I\3I\7I\u0366")
        buf.write("\nI\fI\16I\u0369\13I\5I\u036b\nI\3J\3J\3J\3J\3J\3J\3J")
        buf.write("\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\7J\u037f\nJ\fJ\16J\u0382")
        buf.write("\13J\3J\3J\5J\u0386\nJ\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0391")
        buf.write("\nK\3L\3L\5L\u0395\nL\3M\3M\3M\5M\u039a\nM\3N\3N\3N\3")
        buf.write("N\3O\3O\3P\3P\3P\3P\3P\3P\3P\5P\u03a9\nP\3Q\3Q\3Q\3Q\5")
        buf.write("Q\u03af\nQ\3R\3R\3R\3R\3R\3R\3R\3R\5R\u03b9\nR\3S\3S\3")
        buf.write("S\3S\3S\3S\6S\u03c1\nS\rS\16S\u03c2\3S\3S\3S\3S\3S\3S")
        buf.write("\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u03d6\nS\3T\3T\3")
        buf.write("T\3T\7T\u03dc\nT\fT\16T\u03df\13T\3T\3T\3U\3U\3U\3U\6")
        buf.write("U\u03e7\nU\rU\16U\u03e8\3U\3U\3U\3U\3V\3V\3V\3V\3W\3W")
        buf.write("\3W\3W\3X\3X\3X\5X\u03fa\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\6Y\u0408\nY\rY\16Y\u0409\3Y\3Y\5Y\u040e\nY")
        buf.write("\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\5[\u041c\n[\3\\\3")
        buf.write("\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3]\3]\7]\u042a\n]\f]\16")
        buf.write("]\u042d\13]\5]\u042f\n]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]")
        buf.write("\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\5]\u0486\n]\3^\3^\5^\u048a\n^\3_\3_\3_\5_\u048f")
        buf.write("\n_\3_\3_\5_\u0493\n_\5_\u0495\n_\3`\3`\3`\5`\u049a\n")
        buf.write("`\3`\3`\5`\u049e\n`\5`\u04a0\n`\3a\3a\3b\3b\3c\3c\3c\3")
        buf.write("c\3c\2\4$\u0088d\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\2\23\3\2_`\3\2\4\r\3\2\4\5\3\2\6\t\3\2\n\r\3\2KL\4\2")
        buf.write("yy\u0088\u0088\3\2ab\4\2ccfh\3\2*+\3\2in\3\2rs\3\2()\3")
        buf.write("\2\22\25\3\2\26\27\3\2Z[\3\2\u0083\u0086\2\u04f8\2\u00c9")
        buf.write("\3\2\2\2\4\u00d6\3\2\2\2\6\u00d8\3\2\2\2\b\u00e3\3\2\2")
        buf.write("\2\n\u00e7\3\2\2\2\f\u00f5\3\2\2\2\16\u00f7\3\2\2\2\20")
        buf.write("\u00fa\3\2\2\2\22\u00ff\3\2\2\2\24\u0108\3\2\2\2\26\u0112")
        buf.write("\3\2\2\2\30\u0114\3\2\2\2\32\u0118\3\2\2\2\34\u011a\3")
        buf.write("\2\2\2\36\u011c\3\2\2\2 \u011e\3\2\2\2\"\u012c\3\2\2\2")
        buf.write("$\u013f\3\2\2\2&\u0149\3\2\2\2(\u014d\3\2\2\2*\u014f\3")
        buf.write("\2\2\2,\u0159\3\2\2\2.\u015f\3\2\2\2\60\u016a\3\2\2\2")
        buf.write("\62\u0173\3\2\2\2\64\u017b\3\2\2\2\66\u0184\3\2\2\28\u018f")
        buf.write("\3\2\2\2:\u01a3\3\2\2\2<\u01aa\3\2\2\2>\u01ad\3\2\2\2")
        buf.write("@\u01b1\3\2\2\2B\u01b5\3\2\2\2D\u01c6\3\2\2\2F\u01c8\3")
        buf.write("\2\2\2H\u01d5\3\2\2\2J\u01e2\3\2\2\2L\u01ed\3\2\2\2N\u0207")
        buf.write("\3\2\2\2P\u020d\3\2\2\2R\u0210\3\2\2\2T\u0218\3\2\2\2")
        buf.write("V\u0221\3\2\2\2X\u022a\3\2\2\2Z\u023b\3\2\2\2\\\u023d")
        buf.write("\3\2\2\2^\u024b\3\2\2\2`\u024d\3\2\2\2b\u0257\3\2\2\2")
        buf.write("d\u025b\3\2\2\2f\u025d\3\2\2\2h\u0271\3\2\2\2j\u0273\3")
        buf.write("\2\2\2l\u027a\3\2\2\2n\u027f\3\2\2\2p\u0287\3\2\2\2r\u0293")
        buf.write("\3\2\2\2t\u029f\3\2\2\2v\u02a9\3\2\2\2x\u02cf\3\2\2\2")
        buf.write("z\u02d4\3\2\2\2|\u02e7\3\2\2\2~\u02e9\3\2\2\2\u0080\u02ed")
        buf.write("\3\2\2\2\u0082\u02f4\3\2\2\2\u0084\u030a\3\2\2\2\u0086")
        buf.write("\u0315\3\2\2\2\u0088\u0323\3\2\2\2\u008a\u0356\3\2\2\2")
        buf.write("\u008c\u035c\3\2\2\2\u008e\u035e\3\2\2\2\u0090\u036a\3")
        buf.write("\2\2\2\u0092\u0385\3\2\2\2\u0094\u0390\3\2\2\2\u0096\u0394")
        buf.write("\3\2\2\2\u0098\u0399\3\2\2\2\u009a\u039b\3\2\2\2\u009c")
        buf.write("\u039f\3\2\2\2\u009e\u03a8\3\2\2\2\u00a0\u03ae\3\2\2\2")
        buf.write("\u00a2\u03b8\3\2\2\2\u00a4\u03d5\3\2\2\2\u00a6\u03d7\3")
        buf.write("\2\2\2\u00a8\u03e2\3\2\2\2\u00aa\u03ee\3\2\2\2\u00ac\u03f2")
        buf.write("\3\2\2\2\u00ae\u03f9\3\2\2\2\u00b0\u040d\3\2\2\2\u00b2")
        buf.write("\u040f\3\2\2\2\u00b4\u041b\3\2\2\2\u00b6\u041d\3\2\2\2")
        buf.write("\u00b8\u0485\3\2\2\2\u00ba\u0489\3\2\2\2\u00bc\u0494\3")
        buf.write("\2\2\2\u00be\u049f\3\2\2\2\u00c0\u04a1\3\2\2\2\u00c2\u04a3")
        buf.write("\3\2\2\2\u00c4\u04a5\3\2\2\2\u00c6\u00c8\5\4\3\2\u00c7")
        buf.write("\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2")
        buf.write("\u00c9\u00ca\3\2\2\2\u00ca\3\3\2\2\2\u00cb\u00c9\3\2\2")
        buf.write("\2\u00cc\u00cd\7Y\2\2\u00cd\u00ce\5\6\4\2\u00ce\u00cf")
        buf.write("\7u\2\2\u00cf\u00d7\3\2\2\2\u00d0\u00d7\5\n\6\2\u00d1")
        buf.write("\u00d7\5*\26\2\u00d2\u00d7\5\60\31\2\u00d3\u00d7\5\64")
        buf.write("\33\2\u00d4\u00d7\5B\"\2\u00d5\u00d7\5\22\n\2\u00d6\u00cc")
        buf.write("\3\2\2\2\u00d6\u00d0\3\2\2\2\u00d6\u00d1\3\2\2\2\u00d6")
        buf.write("\u00d2\3\2\2\2\u00d6\u00d3\3\2\2\2\u00d6\u00d4\3\2\2\2")
        buf.write("\u00d6\u00d5\3\2\2\2\u00d7\5\3\2\2\2\u00d8\u00dd\7\u0088")
        buf.write("\2\2\u00d9\u00da\7w\2\2\u00da\u00dc\7\u0088\2\2\u00db")
        buf.write("\u00d9\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2")
        buf.write("\u00dd\u00de\3\2\2\2\u00de\7\3\2\2\2\u00df\u00dd\3\2\2")
        buf.write("\2\u00e0\u00e1\5\6\4\2\u00e1\u00e2\7w\2\2\u00e2\u00e4")
        buf.write("\3\2\2\2\u00e3\u00e0\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\u00e6\7\u0088\2\2\u00e6\t\3\2\2\2")
        buf.write("\u00e7\u00e9\7\\\2\2\u00e8\u00ea\5\f\7\2\u00e9\u00e8\3")
        buf.write("\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00ef")
        buf.write("\7\u0088\2\2\u00ec\u00ee\5\4\3\2\u00ed\u00ec\3\2\2\2\u00ee")
        buf.write("\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2")
        buf.write("\u00f0\u00f2\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f3\7")
        buf.write("]\2\2\u00f3\u00f4\7u\2\2\u00f4\13\3\2\2\2\u00f5\u00f6")
        buf.write("\t\2\2\2\u00f6\r\3\2\2\2\u00f7\u00f8\7U\2\2\u00f8\17\3")
        buf.write("\2\2\2\u00f9\u00fb\5\f\7\2\u00fa\u00f9\3\2\2\2\u00fa\u00fb")
        buf.write("\3\2\2\2\u00fb\u00fd\3\2\2\2\u00fc\u00fe\5\16\b\2\u00fd")
        buf.write("\u00fc\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\21\3\2\2\2\u00ff")
        buf.write("\u0105\7X\2\2\u0100\u0101\5\24\13\2\u0101\u0102\7u\2\2")
        buf.write("\u0102\u0104\3\2\2\2\u0103\u0100\3\2\2\2\u0104\u0107\3")
        buf.write("\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\23")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u0109\5\20\t\2\u0109")
        buf.write("\u010c\7\u0088\2\2\u010a\u010b\7p\2\2\u010b\u010d\5\"")
        buf.write("\22\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u0110")
        buf.write("\3\2\2\2\u010e\u010f\7S\2\2\u010f\u0111\5\26\f\2\u0110")
        buf.write("\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\25\3\2\2\2\u0112")
        buf.write("\u0113\5\30\r\2\u0113\27\3\2\2\2\u0114\u0115\t\3\2\2\u0115")
        buf.write("\31\3\2\2\2\u0116\u0119\5\36\20\2\u0117\u0119\5 \21\2")
        buf.write("\u0118\u0116\3\2\2\2\u0118\u0117\3\2\2\2\u0119\33\3\2")
        buf.write("\2\2\u011a\u011b\t\4\2\2\u011b\35\3\2\2\2\u011c\u011d")
        buf.write("\t\5\2\2\u011d\37\3\2\2\2\u011e\u011f\t\6\2\2\u011f!\3")
        buf.write("\2\2\2\u0120\u012d\5$\23\2\u0121\u0122\7^\2\2\u0122\u0123")
        buf.write("\7{\2\2\u0123\u0128\7\u0088\2\2\u0124\u0125\7v\2\2\u0125")
        buf.write("\u0127\7\u0088\2\2\u0126\u0124\3\2\2\2\u0127\u012a\3\2")
        buf.write("\2\2\u0128\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012b")
        buf.write("\3\2\2\2\u012a\u0128\3\2\2\2\u012b\u012d\7|\2\2\u012c")
        buf.write("\u0120\3\2\2\2\u012c\u0121\3\2\2\2\u012d#\3\2\2\2\u012e")
        buf.write("\u012f\b\23\1\2\u012f\u0140\7\17\2\2\u0130\u0140\5\30")
        buf.write("\r\2\u0131\u0140\7\16\2\2\u0132\u0140\5(\25\2\u0133\u0140")
        buf.write("\5\b\5\2\u0134\u0135\7{\2\2\u0135\u013a\5&\24\2\u0136")
        buf.write("\u0137\7v\2\2\u0137\u0139\5&\24\2\u0138\u0136\3\2\2\2")
        buf.write("\u0139\u013c\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u013b\3")
        buf.write("\2\2\2\u013b\u013d\3\2\2\2\u013c\u013a\3\2\2\2\u013d\u013e")
        buf.write("\7|\2\2\u013e\u0140\3\2\2\2\u013f\u012e\3\2\2\2\u013f")
        buf.write("\u0130\3\2\2\2\u013f\u0131\3\2\2\2\u013f\u0132\3\2\2\2")
        buf.write("\u013f\u0133\3\2\2\2\u013f\u0134\3\2\2\2\u0140\u0146\3")
        buf.write("\2\2\2\u0141\u0142\f\3\2\2\u0142\u0143\7x\2\2\u0143\u0145")
        buf.write("\5\u0088E\2\u0144\u0141\3\2\2\2\u0145\u0148\3\2\2\2\u0146")
        buf.write("\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147%\3\2\2\2\u0148")
        buf.write("\u0146\3\2\2\2\u0149\u014a\7\u0088\2\2\u014a\u014b\7t")
        buf.write("\2\2\u014b\u014c\5$\23\2\u014c\'\3\2\2\2\u014d\u014e\7")
        buf.write("\u0088\2\2\u014e)\3\2\2\2\u014f\u0155\7T\2\2\u0150\u0151")
        buf.write("\5,\27\2\u0151\u0152\7u\2\2\u0152\u0154\3\2\2\2\u0153")
        buf.write("\u0150\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2")
        buf.write("\u0155\u0156\3\2\2\2\u0156+\3\2\2\2\u0157\u0155\3\2\2")
        buf.write("\2\u0158\u015a\5\f\7\2\u0159\u0158\3\2\2\2\u0159\u015a")
        buf.write("\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015c\7\u0088\2\2\u015c")
        buf.write("\u015d\7p\2\2\u015d\u015e\5.\30\2\u015e-\3\2\2\2\u015f")
        buf.write("\u0160\7}\2\2\u0160\u0165\5$\23\2\u0161\u0162\7v\2\2\u0162")
        buf.write("\u0164\5$\23\2\u0163\u0161\3\2\2\2\u0164\u0167\3\2\2\2")
        buf.write("\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0168\3")
        buf.write("\2\2\2\u0167\u0165\3\2\2\2\u0168\u0169\7~\2\2\u0169/\3")
        buf.write("\2\2\2\u016a\u0170\7V\2\2\u016b\u016c\5\62\32\2\u016c")
        buf.write("\u016d\7u\2\2\u016d\u016f\3\2\2\2\u016e\u016b\3\2\2\2")
        buf.write("\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3")
        buf.write("\2\2\2\u0171\61\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0174")
        buf.write("\5\20\t\2\u0174\u0175\7\u0088\2\2\u0175\u0176\7t\2\2\u0176")
        buf.write("\u0179\5$\23\2\u0177\u0178\7p\2\2\u0178\u017a\5\u0088")
        buf.write("E\2\u0179\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\63\3")
        buf.write("\2\2\2\u017b\u0181\7W\2\2\u017c\u017d\5\66\34\2\u017d")
        buf.write("\u017e\7u\2\2\u017e\u0180\3\2\2\2\u017f\u017c\3\2\2\2")
        buf.write("\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3")
        buf.write("\2\2\2\u0182\65\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0189")
        buf.write("\7\u0088\2\2\u0185\u0186\7v\2\2\u0186\u0188\7\u0088\2")
        buf.write("\2\u0187\u0185\3\2\2\2\u0188\u018b\3\2\2\2\u0189\u0187")
        buf.write("\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018c\3\2\2\2\u018b")
        buf.write("\u0189\3\2\2\2\u018c\u018d\7t\2\2\u018d\u018e\5$\23\2")
        buf.write("\u018e\67\3\2\2\2\u018f\u0194\5:\36\2\u0190\u0191\7v\2")
        buf.write("\2\u0191\u0193\5:\36\2\u0192\u0190\3\2\2\2\u0193\u0196")
        buf.write("\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195")
        buf.write("\u0197\3\2\2\2\u0196\u0194\3\2\2\2\u0197\u0198\7t\2\2")
        buf.write("\u0198\u019a\5$\23\2\u0199\u019b\5<\37\2\u019a\u0199\3")
        buf.write("\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d\3\2\2\2\u019c\u019e")
        buf.write("\5> \2\u019d\u019c\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a0")
        buf.write("\3\2\2\2\u019f\u01a1\5@!\2\u01a0\u019f\3\2\2\2\u01a0\u01a1")
        buf.write("\3\2\2\2\u01a19\3\2\2\2\u01a2\u01a4\7Q\2\2\u01a3\u01a2")
        buf.write("\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a6\3\2\2\2\u01a5")
        buf.write("\u01a7\7R\2\2\u01a6\u01a5\3\2\2\2\u01a6\u01a7\3\2\2\2")
        buf.write("\u01a7\u01a8\3\2\2\2\u01a8\u01a9\7\u0088\2\2\u01a9;\3")
        buf.write("\2\2\2\u01aa\u01ab\7P\2\2\u01ab\u01ac\5\u0086D\2\u01ac")
        buf.write("=\3\2\2\2\u01ad\u01ae\7O\2\2\u01ae\u01af\7p\2\2\u01af")
        buf.write("\u01b0\5\u0088E\2\u01b0?\3\2\2\2\u01b1\u01b2\7\61\2\2")
        buf.write("\u01b2\u01b3\7p\2\2\u01b3\u01b4\5\u0088E\2\u01b4A\3\2")
        buf.write("\2\2\u01b5\u01b6\5D#\2\u01b6\u01b7\5\20\t\2\u01b7\u01b9")
        buf.write("\7\u0088\2\2\u01b8\u01ba\5F$\2\u01b9\u01b8\3\2\2\2\u01b9")
        buf.write("\u01ba\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bc\5H%\2\u01bc")
        buf.write("\u01bd\7M\2\2\u01bd\u01bf\5H%\2\u01be\u01c0\5J&\2\u01bf")
        buf.write("\u01be\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2\3\2\2\2")
        buf.write("\u01c1\u01c3\5L\'\2\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3")
        buf.write("\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5\5N(\2\u01c5C\3")
        buf.write("\2\2\2\u01c6\u01c7\t\7\2\2\u01c7E\3\2\2\2\u01c8\u01d1")
        buf.write("\7\u0081\2\2\u01c9\u01ce\7\u0088\2\2\u01ca\u01cb\7v\2")
        buf.write("\2\u01cb\u01cd\7\u0088\2\2\u01cc\u01ca\3\2\2\2\u01cd\u01d0")
        buf.write("\3\2\2\2\u01ce\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf")
        buf.write("\u01d2\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d1\u01c9\3\2\2\2")
        buf.write("\u01d1\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\7")
        buf.write("\u0082\2\2\u01d4G\3\2\2\2\u01d5\u01de\7}\2\2\u01d6\u01db")
        buf.write("\58\35\2\u01d7\u01d8\7u\2\2\u01d8\u01da\58\35\2\u01d9")
        buf.write("\u01d7\3\2\2\2\u01da\u01dd\3\2\2\2\u01db\u01d9\3\2\2\2")
        buf.write("\u01db\u01dc\3\2\2\2\u01dc\u01df\3\2\2\2\u01dd\u01db\3")
        buf.write("\2\2\2\u01de\u01d6\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0")
        buf.write("\3\2\2\2\u01e0\u01e1\7~\2\2\u01e1I\3\2\2\2\u01e2\u01e3")
        buf.write("\7I\2\2\u01e3\u01e8\5(\25\2\u01e4\u01e5\7v\2\2\u01e5\u01e7")
        buf.write("\5(\25\2\u01e6\u01e4\3\2\2\2\u01e7\u01ea\3\2\2\2\u01e8")
        buf.write("\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2")
        buf.write("\u01ea\u01e8\3\2\2\2\u01eb\u01ec\5\26\f\2\u01ecK\3\2\2")
        buf.write("\2\u01ed\u01ee\7J\2\2\u01ee\u01ef\5\b\5\2\u01efM\3\2\2")
        buf.write("\2\u01f0\u0208\7u\2\2\u01f1\u01f2\5Z.\2\u01f2\u01f3\7")
        buf.write("u\2\2\u01f3\u0208\3\2\2\2\u01f4\u01f6\5T+\2\u01f5\u01f4")
        buf.write("\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8\3\2\2\2\u01f7")
        buf.write("\u01f9\5V,\2\u01f8\u01f7\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9")
        buf.write("\u01fa\3\2\2\2\u01fa\u0200\7G\2\2\u01fb\u01fc\5Z.\2\u01fc")
        buf.write("\u01fd\7u\2\2\u01fd\u01ff\3\2\2\2\u01fe\u01fb\3\2\2\2")
        buf.write("\u01ff\u0202\3\2\2\2\u0200\u01fe\3\2\2\2\u0200\u0201\3")
        buf.write("\2\2\2\u0201\u0203\3\2\2\2\u0202\u0200\3\2\2\2\u0203\u0205")
        buf.write("\7H\2\2\u0204\u0206\7u\2\2\u0205\u0204\3\2\2\2\u0205\u0206")
        buf.write("\3\2\2\2\u0206\u0208\3\2\2\2\u0207\u01f0\3\2\2\2\u0207")
        buf.write("\u01f1\3\2\2\2\u0207\u01f5\3\2\2\2\u0208O\3\2\2\2\u0209")
        buf.write("\u020a\5Z.\2\u020a\u020b\7u\2\2\u020b\u020e\3\2\2\2\u020c")
        buf.write("\u020e\5R*\2\u020d\u0209\3\2\2\2\u020d\u020c\3\2\2\2\u020e")
        buf.write("Q\3\2\2\2\u020f\u0211\5T+\2\u0210\u020f\3\2\2\2\u0210")
        buf.write("\u0211\3\2\2\2\u0211\u0213\3\2\2\2\u0212\u0214\5V,\2\u0213")
        buf.write("\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0216\3\2\2\2")
        buf.write("\u0215\u0217\5X-\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2")
        buf.write("\2\2\u0217S\3\2\2\2\u0218\u0219\7E\2\2\u0219\u021e\7\u0088")
        buf.write("\2\2\u021a\u021b\7v\2\2\u021b\u021d\7\u0088\2\2\u021c")
        buf.write("\u021a\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021c\3\2\2\2")
        buf.write("\u021e\u021f\3\2\2\2\u021fU\3\2\2\2\u0220\u021e\3\2\2")
        buf.write("\2\u0221\u0227\7F\2\2\u0222\u0223\58\35\2\u0223\u0224")
        buf.write("\7u\2\2\u0224\u0226\3\2\2\2\u0225\u0222\3\2\2\2\u0226")
        buf.write("\u0229\3\2\2\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2")
        buf.write("\u0228W\3\2\2\2\u0229\u0227\3\2\2\2\u022a\u0230\7G\2\2")
        buf.write("\u022b\u022c\5Z.\2\u022c\u022d\7u\2\2\u022d\u022f\3\2")
        buf.write("\2\2\u022e\u022b\3\2\2\2\u022f\u0232\3\2\2\2\u0230\u022e")
        buf.write("\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0233\3\2\2\2\u0232")
        buf.write("\u0230\3\2\2\2\u0233\u0234\7H\2\2\u0234Y\3\2\2\2\u0235")
        buf.write("\u023c\5\\/\2\u0236\u023c\5b\62\2\u0237\u023c\5f\64\2")
        buf.write("\u0238\u0239\5d\63\2\u0239\u023a\5j\66\2\u023a\u023c\3")
        buf.write("\2\2\2\u023b\u0235\3\2\2\2\u023b\u0236\3\2\2\2\u023b\u0237")
        buf.write("\3\2\2\2\u023b\u0238\3\2\2\2\u023c[\3\2\2\2\u023d\u023e")
        buf.write("\5^\60\2\u023e\u023f\7p\2\2\u023f\u0240\5\u0088E\2\u0240")
        buf.write("]\3\2\2\2\u0241\u0246\5`\61\2\u0242\u0243\7v\2\2\u0243")
        buf.write("\u0245\5`\61\2\u0244\u0242\3\2\2\2\u0245\u0248\3\2\2\2")
        buf.write("\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u024c\3")
        buf.write("\2\2\2\u0248\u0246\3\2\2\2\u0249\u024a\7}\2\2\u024a\u024c")
        buf.write("\7~\2\2\u024b\u0241\3\2\2\2\u024b\u0249\3\2\2\2\u024c")
        buf.write("_\3\2\2\2\u024d\u024e\7\u0088\2\2\u024ea\3\2\2\2\u024f")
        buf.write("\u0250\7C\2\2\u0250\u0251\7\u0088\2\2\u0251\u0252\7t\2")
        buf.write("\2\u0252\u0258\5\u0088E\2\u0253\u0254\7D\2\2\u0254\u0255")
        buf.write("\7\u0088\2\2\u0255\u0256\7t\2\2\u0256\u0258\5\u0088E\2")
        buf.write("\u0257\u024f\3\2\2\2\u0257\u0253\3\2\2\2\u0258c\3\2\2")
        buf.write("\2\u0259\u025c\5t;\2\u025a\u025c\5n8\2\u025b\u0259\3\2")
        buf.write("\2\2\u025b\u025a\3\2\2\2\u025ce\3\2\2\2\u025d\u025e\7")
        buf.write("A\2\2\u025e\u025f\5h\65\2\u025fg\3\2\2\2\u0260\u0263\7")
        buf.write("\u0088\2\2\u0261\u0262\7B\2\2\u0262\u0264\5\u0088E\2\u0263")
        buf.write("\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0272\3\2\2\2")
        buf.write("\u0265\u0266\7}\2\2\u0266\u026b\7\u0088\2\2\u0267\u0268")
        buf.write("\7v\2\2\u0268\u026a\7\u0088\2\2\u0269\u0267\3\2\2\2\u026a")
        buf.write("\u026d\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2")
        buf.write("\u026c\u026e\3\2\2\2\u026d\u026b\3\2\2\2\u026e\u026f\7")
        buf.write("~\2\2\u026f\u0270\7B\2\2\u0270\u0272\5\u0088E\2\u0271")
        buf.write("\u0260\3\2\2\2\u0271\u0265\3\2\2\2\u0272i\3\2\2\2\u0273")
        buf.write("\u0274\7M\2\2\u0274\u0275\5l\67\2\u0275k\3\2\2\2\u0276")
        buf.write("\u0277\7\u0088\2\2\u0277\u0279\7v\2\2\u0278\u0276\3\2")
        buf.write("\2\2\u0279\u027c\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b")
        buf.write("\3\2\2\2\u027b\u027d\3\2\2\2\u027c\u027a\3\2\2\2\u027d")
        buf.write("\u027e\t\b\2\2\u027em\3\2\2\2\u027f\u0281\7@\2\2\u0280")
        buf.write("\u0282\7\u0088\2\2\u0281\u0280\3\2\2\2\u0281\u0282\3\2")
        buf.write("\2\2\u0282\u0285\3\2\2\2\u0283\u0286\5p9\2\u0284\u0286")
        buf.write("\5r:\2\u0285\u0283\3\2\2\2\u0285\u0284\3\2\2\2\u0286o")
        buf.write("\3\2\2\2\u0287\u0288\7B\2\2\u0288\u0289\5\u0088E\2\u0289")
        buf.write("\u028c\7>\2\2\u028a\u028d\5P)\2\u028b\u028d\5p9\2\u028c")
        buf.write("\u028a\3\2\2\2\u028c\u028b\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u0291\7?\2\2\u028f\u0292\5P)\2\u0290\u0292\5p9")
        buf.write("\2\u0291\u028f\3\2\2\2\u0291\u0290\3\2\2\2\u0292q\3\2")
        buf.write("\2\2\u0293\u0294\7P\2\2\u0294\u0295\5\u0088E\2\u0295\u029b")
        buf.write("\7=\2\2\u0296\u0297\7z\2\2\u0297\u0298\5\u00b4[\2\u0298")
        buf.write("\u0299\7t\2\2\u0299\u029a\5P)\2\u029a\u029c\3\2\2\2\u029b")
        buf.write("\u0296\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029b\3\2\2\2")
        buf.write("\u029d\u029e\3\2\2\2\u029es\3\2\2\2\u029f\u02a1\7\66\2")
        buf.write("\2\u02a0\u02a2\7\u0088\2\2\u02a1\u02a0\3\2\2\2\u02a1\u02a2")
        buf.write("\3\2\2\2\u02a2\u02a4\3\2\2\2\u02a3\u02a5\5v<\2\u02a4\u02a3")
        buf.write("\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6")
        buf.write("\u02a7\3\2\2\2\u02a7u\3\2\2\2\u02a8\u02aa\7\67\2\2\u02a9")
        buf.write("\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ac\3\2\2\2")
        buf.write("\u02ab\u02ad\78\2\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad\3")
        buf.write("\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\79\2\2\u02af\u02b8")
        buf.write("\7\u0088\2\2\u02b0\u02b4\7:\2\2\u02b1\u02b2\5x=\2\u02b2")
        buf.write("\u02b3\7u\2\2\u02b3\u02b5\3\2\2\2\u02b4\u02b1\3\2\2\2")
        buf.write("\u02b5\u02b6\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3")
        buf.write("\2\2\2\u02b7\u02b9\3\2\2\2\u02b8\u02b0\3\2\2\2\u02b8\u02b9")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02cd\5P)\2\u02bb\u02c1")
        buf.write("\7;\2\2\u02bc\u02bd\5x=\2\u02bd\u02be\7u\2\2\u02be\u02c0")
        buf.write("\3\2\2\2\u02bf\u02bc\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1")
        buf.write("\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02cb\3\2\2\2")
        buf.write("\u02c3\u02c1\3\2\2\2\u02c4\u02c6\7<\2\2\u02c5\u02c7\5")
        buf.write("\u0084C\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02c8\3\2\2\2\u02c8\u02c9\5|?\2\u02c9\u02ca\7u\2\2\u02ca")
        buf.write("\u02cc\3\2\2\2\u02cb\u02c4\3\2\2\2\u02cb\u02cc\3\2\2\2")
        buf.write("\u02cc\u02ce\3\2\2\2\u02cd\u02bb\3\2\2\2\u02cd\u02ce\3")
        buf.write("\2\2\2\u02cew\3\2\2\2\u02cf\u02d0\7B\2\2\u02d0\u02d1\5")
        buf.write("\u0088E\2\u02d1\u02d2\5z>\2\u02d2y\3\2\2\2\u02d3\u02d5")
        buf.write("\5\u0084C\2\u02d4\u02d3\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5")
        buf.write("\u02d6\3\2\2\2\u02d6\u02d7\5|?\2\u02d7{\3\2\2\2\u02d8")
        buf.write("\u02e8\5\u0082B\2\u02d9\u02da\7B\2\2\u02da\u02db\5\u0088")
        buf.write("E\2\u02db\u02df\5z>\2\u02dc\u02de\5~@\2\u02dd\u02dc\3")
        buf.write("\2\2\2\u02de\u02e1\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02e0")
        buf.write("\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3\2\2\2\u02e2")
        buf.write("\u02e4\5\u0080A\2\u02e3\u02e2\3\2\2\2\u02e3\u02e4\3\2")
        buf.write("\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\7]\2\2\u02e6\u02e8")
        buf.write("\3\2\2\2\u02e7\u02d8\3\2\2\2\u02e7\u02d9\3\2\2\2\u02e8")
        buf.write("}\3\2\2\2\u02e9\u02ea\7\65\2\2\u02ea\u02eb\5\u0088E\2")
        buf.write("\u02eb\u02ec\5z>\2\u02ec\177\3\2\2\2\u02ed\u02ee\7?\2")
        buf.write("\2\u02ee\u02ef\5z>\2\u02ef\u0081\3\2\2\2\u02f0\u02f1\7")
        buf.write("\62\2\2\u02f1\u02f5\7\u0088\2\2\u02f2\u02f3\7\63\2\2\u02f3")
        buf.write("\u02f5\7\u0088\2\2\u02f4\u02f0\3\2\2\2\u02f4\u02f2\3\2")
        buf.write("\2\2\u02f5\u0083\3\2\2\2\u02f6\u02f7\7\64\2\2\u02f7\u02f9")
        buf.write("\7{\2\2\u02f8\u02fa\7A\2\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa")
        buf.write("\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u0303\5h\65\2\u02fc")
        buf.write("\u02fe\7u\2\2\u02fd\u02ff\7A\2\2\u02fe\u02fd\3\2\2\2\u02fe")
        buf.write("\u02ff\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0302\5h\65\2")
        buf.write("\u0301\u02fc\3\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301\3")
        buf.write("\2\2\2\u0303\u0304\3\2\2\2\u0304\u0306\3\2\2\2\u0305\u0303")
        buf.write("\3\2\2\2\u0306\u0307\7|\2\2\u0307\u030b\3\2\2\2\u0308")
        buf.write("\u0309\7\64\2\2\u0309\u030b\5P)\2\u030a\u02f6\3\2\2\2")
        buf.write("\u030a\u0308\3\2\2\2\u030b\u0085\3\2\2\2\u030c\u0316\7")
        buf.write("\u0088\2\2\u030d\u030e\7N\2\2\u030e\u0316\7\u0088\2\2")
        buf.write("\u030f\u0310\7}\2\2\u0310\u0311\7\u0088\2\2\u0311\u0312")
        buf.write("\7=\2\2\u0312\u0313\5\u00b4[\2\u0313\u0314\7~\2\2\u0314")
        buf.write("\u0316\3\2\2\2\u0315\u030c\3\2\2\2\u0315\u030d\3\2\2\2")
        buf.write("\u0315\u030f\3\2\2\2\u0316\u0087\3\2\2\2\u0317\u0318\b")
        buf.write("E\1\2\u0318\u0324\5\u008cG\2\u0319\u0324\5\u008aF\2\u031a")
        buf.write("\u0324\5\u008eH\2\u031b\u0324\5\u0092J\2\u031c\u0324\5")
        buf.write("\u009eP\2\u031d\u0324\5\u0094K\2\u031e\u0324\5\u00a4S")
        buf.write("\2\u031f\u0324\5\u00a6T\2\u0320\u0324\5\u00a8U\2\u0321")
        buf.write("\u0324\5\u00b0Y\2\u0322\u0324\5\u00b6\\\2\u0323\u0317")
        buf.write("\3\2\2\2\u0323\u0319\3\2\2\2\u0323\u031a\3\2\2\2\u0323")
        buf.write("\u031b\3\2\2\2\u0323\u031c\3\2\2\2\u0323\u031d\3\2\2\2")
        buf.write("\u0323\u031e\3\2\2\2\u0323\u031f\3\2\2\2\u0323\u0320\3")
        buf.write("\2\2\2\u0323\u0321\3\2\2\2\u0323\u0322\3\2\2\2\u0324\u0346")
        buf.write("\3\2\2\2\u0325\u0326\f\23\2\2\u0326\u0327\7d\2\2\u0327")
        buf.write("\u0345\5\u0088E\24\u0328\u0329\f\22\2\2\u0329\u032a\7")
        buf.write("x\2\2\u032a\u0345\5\u0088E\23\u032b\u032c\f\20\2\2\u032c")
        buf.write("\u032d\5\u00a2R\2\u032d\u032e\5\u0088E\21\u032e\u0345")
        buf.write("\3\2\2\2\u032f\u0330\f\17\2\2\u0330\u0331\7-\2\2\u0331")
        buf.write("\u0345\5\u0088E\20\u0332\u0333\f\16\2\2\u0333\u0334\7")
        buf.write("/\2\2\u0334\u0345\5\u0088E\17\u0335\u0336\f\26\2\2\u0336")
        buf.write("\u0337\7e\2\2\u0337\u0345\7\u0088\2\2\u0338\u0339\f\25")
        buf.write("\2\2\u0339\u0345\5\u00acW\2\u033a\u033b\f\24\2\2\u033b")
        buf.write("\u033c\7\177\2\2\u033c\u033d\5\u0088E\2\u033d\u033e\7")
        buf.write("y\2\2\u033e\u033f\5\u0088E\2\u033f\u0340\7\u0080\2\2\u0340")
        buf.write("\u0345\3\2\2\2\u0341\u0342\f\21\2\2\u0342\u0343\7P\2\2")
        buf.write("\u0343\u0345\5\u0086D\2\u0344\u0325\3\2\2\2\u0344\u0328")
        buf.write("\3\2\2\2\u0344\u032b\3\2\2\2\u0344\u032f\3\2\2\2\u0344")
        buf.write("\u0332\3\2\2\2\u0344\u0335\3\2\2\2\u0344\u0338\3\2\2\2")
        buf.write("\u0344\u033a\3\2\2\2\u0344\u0341\3\2\2\2\u0345\u0348\3")
        buf.write("\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0089")
        buf.write("\3\2\2\2\u0348\u0346\3\2\2\2\u0349\u0357\5\u00c0a\2\u034a")
        buf.write("\u034c\7a\2\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2")
        buf.write("\u034c\u034d\3\2\2\2\u034d\u0357\5\u00c2b\2\u034e\u0357")
        buf.write("\7\u0087\2\2\u034f\u0350\7}\2\2\u0350\u0351\5\u00c2b\2")
        buf.write("\u0351\u0352\7t\2\2\u0352\u0353\5(\25\2\u0353\u0354\7")
        buf.write("~\2\2\u0354\u0357\3\2\2\2\u0355\u0357\5\u00c4c\2\u0356")
        buf.write("\u0349\3\2\2\2\u0356\u034b\3\2\2\2\u0356\u034e\3\2\2\2")
        buf.write("\u0356\u034f\3\2\2\2\u0356\u0355\3\2\2\2\u0357\u008b\3")
        buf.write("\2\2\2\u0358\u035d\7\u0088\2\2\u0359\u035d\5\b\5\2\u035a")
        buf.write("\u035b\7\61\2\2\u035b\u035d\7\u0088\2\2\u035c\u0358\3")
        buf.write("\2\2\2\u035c\u0359\3\2\2\2\u035c\u035a\3\2\2\2\u035d\u008d")
        buf.write("\3\2\2\2\u035e\u035f\7}\2\2\u035f\u0360\5\u0090I\2\u0360")
        buf.write("\u0361\7~\2\2\u0361\u008f\3\2\2\2\u0362\u0367\5\u0088")
        buf.write("E\2\u0363\u0364\7v\2\2\u0364\u0366\5\u0088E\2\u0365\u0363")
        buf.write("\3\2\2\2\u0366\u0369\3\2\2\2\u0367\u0365\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u036a\u0362\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u0091\3")
        buf.write("\2\2\2\u036c\u036d\7,\2\2\u036d\u0386\5\u0088E\2\u036e")
        buf.write("\u036f\7.\2\2\u036f\u0370\7}\2\2\u0370\u0371\5\u0090I")
        buf.write("\2\u0371\u0372\7u\2\2\u0372\u0373\5\u0088E\2\u0373\u0374")
        buf.write("\7u\2\2\u0374\u0375\5\u0090I\2\u0375\u0376\7~\2\2\u0376")
        buf.write("\u0386\3\2\2\2\u0377\u0378\7\60\2\2\u0378\u0379\7}\2\2")
        buf.write("\u0379\u037a\5\u0088E\2\u037a\u037b\7u\2\2\u037b\u0380")
        buf.write("\5\u0090I\2\u037c\u037d\7u\2\2\u037d\u037f\5\u0090I\2")
        buf.write("\u037e\u037c\3\2\2\2\u037f\u0382\3\2\2\2\u0380\u037e\3")
        buf.write("\2\2\2\u0380\u0381\3\2\2\2\u0381\u0383\3\2\2\2\u0382\u0380")
        buf.write("\3\2\2\2\u0383\u0384\7~\2\2\u0384\u0386\3\2\2\2\u0385")
        buf.write("\u036c\3\2\2\2\u0385\u036e\3\2\2\2\u0385\u0377\3\2\2\2")
        buf.write("\u0386\u0093\3\2\2\2\u0387\u0388\5\u0096L\2\u0388\u0389")
        buf.write("\5\u0088E\2\u0389\u0391\3\2\2\2\u038a\u038b\7}\2\2\u038b")
        buf.write("\u038c\5\u0088E\2\u038c\u038d\7t\2\2\u038d\u038e\5$\23")
        buf.write("\2\u038e\u038f\7~\2\2\u038f\u0391\3\2\2\2\u0390\u0387")
        buf.write("\3\2\2\2\u0390\u038a\3\2\2\2\u0391\u0095\3\2\2\2\u0392")
        buf.write("\u0395\7&\2\2\u0393\u0395\t\t\2\2\u0394\u0392\3\2\2\2")
        buf.write("\u0394\u0393\3\2\2\2\u0395\u0097\3\2\2\2\u0396\u039a\t")
        buf.write("\n\2\2\u0397\u039a\t\t\2\2\u0398\u039a\t\13\2\2\u0399")
        buf.write("\u0396\3\2\2\2\u0399\u0397\3\2\2\2\u0399\u0398\3\2\2\2")
        buf.write("\u039a\u0099\3\2\2\2\u039b\u039c\5\u0088E\2\u039c\u039d")
        buf.write("\5\u009cO\2\u039d\u039e\5\u0088E\2\u039e\u009b\3\2\2\2")
        buf.write("\u039f\u03a0\t\f\2\2\u03a0\u009d\3\2\2\2\u03a1\u03a2\7")
        buf.write("N\2\2\u03a2\u03a9\5\u0088E\2\u03a3\u03a4\7o\2\2\u03a4")
        buf.write("\u03a5\7}\2\2\u03a5\u03a6\5\u0090I\2\u03a6\u03a7\7~\2")
        buf.write("\2\u03a7\u03a9\3\2\2\2\u03a8\u03a1\3\2\2\2\u03a8\u03a3")
        buf.write("\3\2\2\2\u03a9\u009f\3\2\2\2\u03aa\u03af\7q\2\2\u03ab")
        buf.write("\u03af\t\r\2\2\u03ac\u03af\7\'\2\2\u03ad\u03af\t\16\2")
        buf.write("\2\u03ae\u03aa\3\2\2\2\u03ae\u03ab\3\2\2\2\u03ae\u03ac")
        buf.write("\3\2\2\2\u03ae\u03ad\3\2\2\2\u03af\u00a1\3\2\2\2\u03b0")
        buf.write("\u03b9\t\n\2\2\u03b1\u03b9\t\t\2\2\u03b2\u03b9\t\13\2")
        buf.write("\2\u03b3\u03b9\t\f\2\2\u03b4\u03b9\7q\2\2\u03b5\u03b9")
        buf.write("\t\r\2\2\u03b6\u03b9\7\'\2\2\u03b7\u03b9\t\16\2\2\u03b8")
        buf.write("\u03b0\3\2\2\2\u03b8\u03b1\3\2\2\2\u03b8\u03b2\3\2\2\2")
        buf.write("\u03b8\u03b3\3\2\2\2\u03b8\u03b4\3\2\2\2\u03b8\u03b5\3")
        buf.write("\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b7\3\2\2\2\u03b9\u00a3")
        buf.write("\3\2\2\2\u03ba\u03bb\7$\2\2\u03bb\u03d6\5\u0088E\2\u03bc")
        buf.write("\u03bd\7}\2\2\u03bd\u03be\5\u0088E\2\u03be\u03c0\7e\2")
        buf.write("\2\u03bf\u03c1\5\u00aeX\2\u03c0\u03bf\3\2\2\2\u03c1\u03c2")
        buf.write("\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3")
        buf.write("\u03c4\3\2\2\2\u03c4\u03c5\7O\2\2\u03c5\u03c6\5\u0088")
        buf.write("E\2\u03c6\u03c7\7~\2\2\u03c7\u03d6\3\2\2\2\u03c8\u03c9")
        buf.write("\7%\2\2\u03c9\u03ca\7}\2\2\u03ca\u03cb\5\u0088E\2\u03cb")
        buf.write("\u03cc\7u\2\2\u03cc\u03cd\5\u00c2b\2\u03cd\u03ce\7u\2")
        buf.write("\2\u03ce\u03cf\5\u00c2b\2\u03cf\u03d0\7~\2\2\u03d0\u03d6")
        buf.write("\3\2\2\2\u03d1\u03d2\7\177\2\2\u03d2\u03d3\5\u0090I\2")
        buf.write("\u03d3\u03d4\7\u0080\2\2\u03d4\u03d6\3\2\2\2\u03d5\u03ba")
        buf.write("\3\2\2\2\u03d5\u03bc\3\2\2\2\u03d5\u03c8\3\2\2\2\u03d5")
        buf.write("\u03d1\3\2\2\2\u03d6\u00a5\3\2\2\2\u03d7\u03d8\7{\2\2")
        buf.write("\u03d8\u03dd\5\u00aaV\2\u03d9\u03da\7v\2\2\u03da\u03dc")
        buf.write("\5\u00aaV\2\u03db\u03d9\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd")
        buf.write("\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e0\3\2\2\2")
        buf.write("\u03df\u03dd\3\2\2\2\u03e0\u03e1\7|\2\2\u03e1\u00a7\3")
        buf.write("\2\2\2\u03e2\u03e3\7}\2\2\u03e3\u03e4\5\u0088E\2\u03e4")
        buf.write("\u03e6\7#\2\2\u03e5\u03e7\5\u00aeX\2\u03e6\u03e5\3\2\2")
        buf.write("\2\u03e7\u03e8\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e9")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\7p\2\2\u03eb")
        buf.write("\u03ec\5\u0088E\2\u03ec\u03ed\7~\2\2\u03ed\u00a9\3\2\2")
        buf.write("\2\u03ee\u03ef\7\u0088\2\2\u03ef\u03f0\7t\2\2\u03f0\u03f1")
        buf.write("\5\u0088E\2\u03f1\u00ab\3\2\2\2\u03f2\u03f3\7\177\2\2")
        buf.write("\u03f3\u03f4\5\u0088E\2\u03f4\u03f5\7\u0080\2\2\u03f5")
        buf.write("\u00ad\3\2\2\2\u03f6\u03f7\7e\2\2\u03f7\u03fa\7\u0088")
        buf.write("\2\2\u03f8\u03fa\5\u00acW\2\u03f9\u03f6\3\2\2\2\u03f9")
        buf.write("\u03f8\3\2\2\2\u03fa\u00af\3\2\2\2\u03fb\u03fc\7B\2\2")
        buf.write("\u03fc\u03fd\5\u0088E\2\u03fd\u03fe\7>\2\2\u03fe\u03ff")
        buf.write("\5\u0088E\2\u03ff\u0400\7?\2\2\u0400\u0401\5\u0088E\2")
        buf.write("\u0401\u040e\3\2\2\2\u0402\u0403\7}\2\2\u0403\u0404\7")
        buf.write("\34\2\2\u0404\u0405\5\u0088E\2\u0405\u0407\7\"\2\2\u0406")
        buf.write("\u0408\5\u00b2Z\2\u0407\u0406\3\2\2\2\u0408\u0409\3\2")
        buf.write("\2\2\u0409\u0407\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040b")
        buf.write("\3\2\2\2\u040b\u040c\7~\2\2\u040c\u040e\3\2\2\2\u040d")
        buf.write("\u03fb\3\2\2\2\u040d\u0402\3\2\2\2\u040e\u00b1\3\2\2\2")
        buf.write("\u040f\u0410\7z\2\2\u0410\u0411\5\u00b4[\2\u0411\u0412")
        buf.write("\7t\2\2\u0412\u0413\5\u0088E\2\u0413\u00b3\3\2\2\2\u0414")
        buf.write("\u041c\5\b\5\2\u0415\u041c\5\u00c4c\2\u0416\u0417\7\177")
        buf.write("\2\2\u0417\u0418\7a\2\2\u0418\u0419\7\u0080\2\2\u0419")
        buf.write("\u041c\5\u00c2b\2\u041a\u041c\5\u00c0a\2\u041b\u0414\3")
        buf.write("\2\2\2\u041b\u0415\3\2\2\2\u041b\u0416\3\2\2\2\u041b\u041a")
        buf.write("\3\2\2\2\u041c\u00b5\3\2\2\2\u041d\u041e\5\u00b8]\2\u041e")
        buf.write("\u041f\7}\2\2\u041f\u0420\5\u0090I\2\u0420\u0421\7~\2")
        buf.write("\2\u0421\u00b7\3\2\2\2\u0422\u0486\5\u00ba^\2\u0423\u0424")
        buf.write("\7}\2\2\u0424\u0425\5\u00ba^\2\u0425\u042e\7\u0081\2\2")
        buf.write("\u0426\u042b\5\u0088E\2\u0427\u0428\7v\2\2\u0428\u042a")
        buf.write("\5\u0088E\2\u0429\u0427\3\2\2\2\u042a\u042d\3\2\2\2\u042b")
        buf.write("\u0429\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042f\3\2\2\2")
        buf.write("\u042d\u042b\3\2\2\2\u042e\u0426\3\2\2\2\u042e\u042f\3")
        buf.write("\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431\7\u0082\2\2\u0431")
        buf.write("\u0432\7~\2\2\u0432\u0486\3\2\2\2\u0433\u0434\7}\2\2\u0434")
        buf.write("\u0435\7\35\2\2\u0435\u0436\5\b\5\2\u0436\u0437\7~\2\2")
        buf.write("\u0437\u0486\3\2\2\2\u0438\u0439\7}\2\2\u0439\u043a\7")
        buf.write("\36\2\2\u043a\u043b\5\b\5\2\u043b\u043c\7~\2\2\u043c\u0486")
        buf.write("\3\2\2\2\u043d\u043e\7}\2\2\u043e\u043f\5\u00bc_\2\u043f")
        buf.write("\u0440\5\u00b8]\2\u0440\u0441\7\u0081\2\2\u0441\u0442")
        buf.write("\5\u0088E\2\u0442\u0443\7\u0082\2\2\u0443\u0444\7~\2\2")
        buf.write("\u0444\u0486\3\2\2\2\u0445\u0446\7}\2\2\u0446\u0447\7")
        buf.write("@\2\2\u0447\u0448\5\u00b8]\2\u0448\u0449\7 \2\2\u0449")
        buf.write("\u044a\5\u0086D\2\u044a\u044b\7~\2\2\u044b\u0486\3\2\2")
        buf.write("\2\u044c\u044d\7}\2\2\u044d\u044e\7@\2\2\u044e\u044f\5")
        buf.write("\u00b8]\2\u044f\u0450\7 \2\2\u0450\u0451\5\u0088E\2\u0451")
        buf.write("\u0452\7O\2\2\u0452\u0453\5\u0088E\2\u0453\u0454\7~\2")
        buf.write("\2\u0454\u0486\3\2\2\2\u0455\u0456\7}\2\2\u0456\u0457")
        buf.write("\7@\2\2\u0457\u0458\5\u00b8]\2\u0458\u0459\7 \2\2\u0459")
        buf.write("\u045a\5\u0088E\2\u045a\u045b\7\67\2\2\u045b\u045c\7O")
        buf.write("\2\2\u045c\u045d\5\u0088E\2\u045d\u045e\7~\2\2\u045e\u0486")
        buf.write("\3\2\2\2\u045f\u0460\7}\2\2\u0460\u0461\7\62\2\2\u0461")
        buf.write("\u0462\5\u00b8]\2\u0462\u0463\7 \2\2\u0463\u0464\5\u0088")
        buf.write("E\2\u0464\u0465\7~\2\2\u0465\u0486\3\2\2\2\u0466\u0467")
        buf.write("\7}\2\2\u0467\u0468\5\u00be`\2\u0468\u0469\5\u00b8]\2")
        buf.write("\u0469\u046a\7\u0081\2\2\u046a\u046b\5\u0088E\2\u046b")
        buf.write("\u046c\7\u0082\2\2\u046c\u046d\7B\2\2\u046d\u046e\5\u0088")
        buf.write("E\2\u046e\u046f\7O\2\2\u046f\u0470\5\u0088E\2\u0470\u0486")
        buf.write("\3\2\2\2\u0471\u0472\7}\2\2\u0472\u0473\7\20\2\2\u0473")
        buf.write("\u0474\5\u00b8]\2\u0474\u0475\7\u0081\2\2\u0475\u0476")
        buf.write("\5\u0088E\2\u0476\u0477\7\u0082\2\2\u0477\u0478\7B\2\2")
        buf.write("\u0478\u0479\5\u0088E\2\u0479\u047a\7~\2\2\u047a\u0486")
        buf.write("\3\2\2\2\u047b\u047c\7}\2\2\u047c\u047d\7\21\2\2\u047d")
        buf.write("\u047e\5\u00b8]\2\u047e\u047f\7\u0081\2\2\u047f\u0480")
        buf.write("\5\u0088E\2\u0480\u0481\7\u0082\2\2\u0481\u0482\7B\2\2")
        buf.write("\u0482\u0483\5\u0088E\2\u0483\u0484\7~\2\2\u0484\u0486")
        buf.write("\3\2\2\2\u0485\u0422\3\2\2\2\u0485\u0423\3\2\2\2\u0485")
        buf.write("\u0433\3\2\2\2\u0485\u0438\3\2\2\2\u0485\u043d\3\2\2\2")
        buf.write("\u0485\u0445\3\2\2\2\u0485\u044c\3\2\2\2\u0485\u0455\3")
        buf.write("\2\2\2\u0485\u045f\3\2\2\2\u0485\u0466\3\2\2\2\u0485\u0471")
        buf.write("\3\2\2\2\u0485\u047b\3\2\2\2\u0486\u00b9\3\2\2\2\u0487")
        buf.write("\u048a\5\b\5\2\u0488\u048a\7!\2\2\u0489\u0487\3\2\2\2")
        buf.write("\u0489\u0488\3\2\2\2\u048a\u00bb\3\2\2\2\u048b\u0495\t")
        buf.write("\17\2\2\u048c\u048e\7\30\2\2\u048d\u048f\5\u00c2b\2\u048e")
        buf.write("\u048d\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0495\3\2\2\2")
        buf.write("\u0490\u0492\7\31\2\2\u0491\u0493\5\u00c2b\2\u0492\u0491")
        buf.write("\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495\3\2\2\2\u0494")
        buf.write("\u048b\3\2\2\2\u0494\u048c\3\2\2\2\u0494\u0490\3\2\2\2")
        buf.write("\u0495\u00bd\3\2\2\2\u0496\u04a0\t\20\2\2\u0497\u0499")
        buf.write("\7\32\2\2\u0498\u049a\5\u00c2b\2\u0499\u0498\3\2\2\2\u0499")
        buf.write("\u049a\3\2\2\2\u049a\u04a0\3\2\2\2\u049b\u049d\7\33\2")
        buf.write("\2\u049c\u049e\5\u00c2b\2\u049d\u049c\3\2\2\2\u049d\u049e")
        buf.write("\3\2\2\2\u049e\u04a0\3\2\2\2\u049f\u0496\3\2\2\2\u049f")
        buf.write("\u0497\3\2\2\2\u049f\u049b\3\2\2\2\u04a0\u00bf\3\2\2\2")
        buf.write("\u04a1\u04a2\t\21\2\2\u04a2\u00c1\3\2\2\2\u04a3\u04a4")
        buf.write("\t\22\2\2\u04a4\u00c3\3\2\2\2\u04a5\u04a6\7\3\2\2\u04a6")
        buf.write("\u04a7\13\2\2\2\u04a7\u04a8\7\3\2\2\u04a8\u00c5\3\2\2")
        buf.write("\2x\u00c9\u00d6\u00dd\u00e3\u00e9\u00ef\u00fa\u00fd\u0105")
        buf.write("\u010c\u0110\u0118\u0128\u012c\u013a\u013f\u0146\u0155")
        buf.write("\u0159\u0165\u0170\u0179\u0181\u0189\u0194\u019a\u019d")
        buf.write("\u01a0\u01a3\u01a6\u01b9\u01bf\u01c2\u01ce\u01d1\u01db")
        buf.write("\u01de\u01e8\u01f5\u01f8\u0200\u0205\u0207\u020d\u0210")
        buf.write("\u0213\u0216\u021e\u0227\u0230\u023b\u0246\u024b\u0257")
        buf.write("\u025b\u0263\u026b\u0271\u027a\u0281\u0285\u028c\u0291")
        buf.write("\u029d\u02a1\u02a6\u02a9\u02ac\u02b6\u02b8\u02c1\u02c6")
        buf.write("\u02cb\u02cd\u02d4\u02df\u02e3\u02e7\u02f4\u02f9\u02fe")
        buf.write("\u0303\u030a\u0315\u0323\u0344\u0346\u034b\u0356\u035c")
        buf.write("\u0367\u036a\u0380\u0385\u0390\u0394\u0399\u03a8\u03ae")
        buf.write("\u03b8\u03c2\u03d5\u03dd\u03e8\u03f9\u0409\u040d\u041b")
        buf.write("\u042b\u042e\u0485\u0489\u048e\u0492\u0494\u0499\u049d")
        buf.write("\u049f")
        return buf.getvalue()


class testParser ( Parser ):

    grammarFileName = "test.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'''", "'float32'", "'float64'", "'int8'", 
                     "'int16'", "'int32'", "'int64'", "'uint8'", "'uint16'", 
                     "'uint32'", "'uint64'", "'char'", "'bool'", "'foldw'", 
                     "'foldwi'", "'map'", "'mapi'", "'fold'", "'foldi'", 
                     "'mapw'", "'mapwi'", "'mapfold'", "'mapfoldi'", "'mapfoldw'", 
                     "'mapfoldwi'", "'case'", "'make'", "'flatten'", "'iterator'", 
                     "'every'", "'prefixop'", "'of'", "'with'", "'reverse'", 
                     "'transpose'", "'lnot'", "'land'", "'lor'", "'lxor'", 
                     "'lsl'", "'lsr'", "'pre'", "'arrow'", "'fby'", "'times'", 
                     "'merge'", "'last'", "'restart'", "'resume'", "'do'", 
                     "'elif'", "'automaton'", "'initial'", "'final'", "'state'", 
                     "'unless'", "'until'", "'synchro'", "'match'", "'then'", 
                     "'else'", "'activate'", "'emit'", "'if'", "'assume'", 
                     "'guarantee'", "'sig'", "'var'", "'let'", "'tel'", 
                     "'where'", "'specialize'", "'function'", "'node'", 
                     "'return'", "'not'", "'default'", "'when'", "'clock'", 
                     "'probe'", "'is'", "'group'", "'import'", "'const'", 
                     "'sensor'", "'type'", "'open'", "'true'", "'false'", 
                     "'package'", "'end'", "'enum'", "'public'", "'private'", 
                     "'-'", "'+'", "'*'", "'@'", "'.'", "'/'", "'mod'", 
                     "'div'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", 
                     "'#'", "'='", "'and'", "'or'", "'xor'", "':'", "';'", 
                     "','", "'::'", "'^'", "'..'", "'|'", "'{'", "'}'", 
                     "'('", "')'", "'['", "']'", "'<<'", "'>>'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "FLOAT32", "FLOAT64", "INT8", 
                      "INT16", "INT32", "INT64", "UINT8", "UINT16", "UINT32", 
                      "UINT64", "CHAR", "BOOL", "FOLDW", "FOLDWI", "MAP", 
                      "MAPI", "FOLD", "FOLDI", "MAPW", "MAPWI", "MAPFOLD", 
                      "MAPFOLDI", "MAPFOLDW", "MAPFOLDWI", "CASE", "MAKE", 
                      "FLATTEN", "ITERATOR", "EVERY", "PREFIXOP", "OF", 
                      "WITH", "REVERSE", "TRANSPOSE", "LNOT", "LAND", "LOR", 
                      "LXOR", "LSL", "LSR", "PRE", "ARROW", "FBY", "TIMES", 
                      "MERGE", "LAST", "RESTART", "RESUME", "DO", "ELIF", 
                      "AUTOMATON", "INITIAL", "FINAL", "STATE", "UNLESS", 
                      "UNTIL", "SYNCHRO", "MATCH", "THEN", "ELSE", "ACTIVATE", 
                      "EMIT", "IF", "ASSUME", "GUARANTEE", "SIG", "VAR", 
                      "LET", "TEL", "WHERE", "SPECIALIZE", "FUNCTION", "NODE", 
                      "RETURN", "NOT", "DEFAULT", "WHEN", "CLOCK", "PROBE", 
                      "IS", "GROUP", "IMPORT", "CONST", "SENSOR", "TYPE", 
                      "OPEN", "TRUE", "FALSE", "PACKAGE", "END", "ENUM", 
                      "PUBLIC", "PRIVATE", "MINUS", "ADD", "STAR", "AT", 
                      "DOT", "DIV", "MOD", "IDIV", "LESS_THAN", "GREATER_THAN", 
                      "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ", "SHARP", "ASSIGN", 
                      "AND", "OR", "XOR", "COLON", "SEMI", "COMMA", "DOMAIN", 
                      "CIRCUMFLEX", "ELLIPSIS", "OR_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LDLT", "RDGT", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "DOUBLE", "ID", "MYSKIP" ]

    RULE_program = 0
    RULE_decls = 1
    RULE_path = 2
    RULE_path_id = 3
    RULE_package_decl = 4
    RULE_visibility = 5
    RULE_external = 6
    RULE_interface_status = 7
    RULE_type_block = 8
    RULE_type_decl = 9
    RULE_numeric_kind = 10
    RULE_numeric = 11
    RULE_myint = 12
    RULE_myfloat = 13
    RULE_signed = 14
    RULE_unsigned = 15
    RULE_type_def = 16
    RULE_type_expr = 17
    RULE_field_decl = 18
    RULE_typevar = 19
    RULE_group_block = 20
    RULE_group_decl = 21
    RULE_group_expr = 22
    RULE_const_block = 23
    RULE_const_decl = 24
    RULE_sensor_block = 25
    RULE_sensor_decl = 26
    RULE_var_decls = 27
    RULE_var_id = 28
    RULE_when_decl = 29
    RULE_default_decl = 30
    RULE_last_decl = 31
    RULE_user_op_decl = 32
    RULE_op_kind = 33
    RULE_size_decl = 34
    RULE_params = 35
    RULE_where_decl = 36
    RULE_spec_decl = 37
    RULE_opt_body = 38
    RULE_data_def = 39
    RULE_scope = 40
    RULE_signal_block = 41
    RULE_local_block = 42
    RULE_eqs = 43
    RULE_equation = 44
    RULE_simple_equation = 45
    RULE_lhs = 46
    RULE_lhs_id = 47
    RULE_myassert = 48
    RULE_control_block = 49
    RULE_emission = 50
    RULE_emission_body = 51
    RULE_myreturn = 52
    RULE_returns_var = 53
    RULE_clocked_block = 54
    RULE_if_block = 55
    RULE_match_block = 56
    RULE_state_machine = 57
    RULE_state_decl = 58
    RULE_transition = 59
    RULE_arrow = 60
    RULE_fork = 61
    RULE_elif_fork = 62
    RULE_else_fork = 63
    RULE_target = 64
    RULE_actions = 65
    RULE_clock_expr = 66
    RULE_expr = 67
    RULE_atom = 68
    RULE_id_expr = 69
    RULE_list_expr = 70
    RULE_mylist = 71
    RULE_tempo_expr = 72
    RULE_arith_expr = 73
    RULE_unary_arith_op = 74
    RULE_bin_arith_op = 75
    RULE_relation_expr = 76
    RULE_bin_relation_op = 77
    RULE_bool_expr = 78
    RULE_bin_bool_op = 79
    RULE_bin_op = 80
    RULE_array_expr = 81
    RULE_struct_expr = 82
    RULE_mixed_constructor = 83
    RULE_label_expr = 84
    RULE_index = 85
    RULE_label_or_index = 86
    RULE_switch_expr = 87
    RULE_case_expr = 88
    RULE_pattern = 89
    RULE_apply_expr = 90
    RULE_operator = 91
    RULE_prefix = 92
    RULE_iterator = 93
    RULE_iterator_mw = 94
    RULE_boolean = 95
    RULE_integer = 96
    RULE_character = 97

    ruleNames =  [ "program", "decls", "path", "path_id", "package_decl", 
                   "visibility", "external", "interface_status", "type_block", 
                   "type_decl", "numeric_kind", "numeric", "myint", "myfloat", 
                   "signed", "unsigned", "type_def", "type_expr", "field_decl", 
                   "typevar", "group_block", "group_decl", "group_expr", 
                   "const_block", "const_decl", "sensor_block", "sensor_decl", 
                   "var_decls", "var_id", "when_decl", "default_decl", "last_decl", 
                   "user_op_decl", "op_kind", "size_decl", "params", "where_decl", 
                   "spec_decl", "opt_body", "data_def", "scope", "signal_block", 
                   "local_block", "eqs", "equation", "simple_equation", 
                   "lhs", "lhs_id", "myassert", "control_block", "emission", 
                   "emission_body", "myreturn", "returns_var", "clocked_block", 
                   "if_block", "match_block", "state_machine", "state_decl", 
                   "transition", "arrow", "fork", "elif_fork", "else_fork", 
                   "target", "actions", "clock_expr", "expr", "atom", "id_expr", 
                   "list_expr", "mylist", "tempo_expr", "arith_expr", "unary_arith_op", 
                   "bin_arith_op", "relation_expr", "bin_relation_op", "bool_expr", 
                   "bin_bool_op", "bin_op", "array_expr", "struct_expr", 
                   "mixed_constructor", "label_expr", "index", "label_or_index", 
                   "switch_expr", "case_expr", "pattern", "apply_expr", 
                   "operator", "prefix", "iterator", "iterator_mw", "boolean", 
                   "integer", "character" ]

    EOF = Token.EOF
    T__0=1
    FLOAT32=2
    FLOAT64=3
    INT8=4
    INT16=5
    INT32=6
    INT64=7
    UINT8=8
    UINT16=9
    UINT32=10
    UINT64=11
    CHAR=12
    BOOL=13
    FOLDW=14
    FOLDWI=15
    MAP=16
    MAPI=17
    FOLD=18
    FOLDI=19
    MAPW=20
    MAPWI=21
    MAPFOLD=22
    MAPFOLDI=23
    MAPFOLDW=24
    MAPFOLDWI=25
    CASE=26
    MAKE=27
    FLATTEN=28
    ITERATOR=29
    EVERY=30
    PREFIXOP=31
    OF=32
    WITH=33
    REVERSE=34
    TRANSPOSE=35
    LNOT=36
    LAND=37
    LOR=38
    LXOR=39
    LSL=40
    LSR=41
    PRE=42
    ARROW=43
    FBY=44
    TIMES=45
    MERGE=46
    LAST=47
    RESTART=48
    RESUME=49
    DO=50
    ELIF=51
    AUTOMATON=52
    INITIAL=53
    FINAL=54
    STATE=55
    UNLESS=56
    UNTIL=57
    SYNCHRO=58
    MATCH=59
    THEN=60
    ELSE=61
    ACTIVATE=62
    EMIT=63
    IF=64
    ASSUME=65
    GUARANTEE=66
    SIG=67
    VAR=68
    LET=69
    TEL=70
    WHERE=71
    SPECIALIZE=72
    FUNCTION=73
    NODE=74
    RETURN=75
    NOT=76
    DEFAULT=77
    WHEN=78
    CLOCK=79
    PROBE=80
    IS=81
    GROUP=82
    IMPORT=83
    CONST=84
    SENSOR=85
    TYPE=86
    OPEN=87
    TRUE=88
    FALSE=89
    PACKAGE=90
    END=91
    ENUM=92
    PUBLIC=93
    PRIVATE=94
    MINUS=95
    ADD=96
    STAR=97
    AT=98
    DOT=99
    DIV=100
    MOD=101
    IDIV=102
    LESS_THAN=103
    GREATER_THAN=104
    EQUALS=105
    GT_EQ=106
    LT_EQ=107
    NOT_EQ=108
    SHARP=109
    ASSIGN=110
    AND=111
    OR=112
    XOR=113
    COLON=114
    SEMI=115
    COMMA=116
    DOMAIN=117
    CIRCUMFLEX=118
    ELLIPSIS=119
    OR_OP=120
    OPEN_BRACE=121
    CLOSE_BRACE=122
    LPAREN=123
    RPAREN=124
    LBRACK=125
    RBRACK=126
    LDLT=127
    RDGT=128
    DECIMAL_INTEGER=129
    OCT_INTEGER=130
    HEX_INTEGER=131
    BIN_INTEGER=132
    DOUBLE=133
    ID=134
    MYSKIP=135

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.DeclsContext)
            else:
                return self.getTypedRuleContext(testParser.DeclsContext,i)


        def getRuleIndex(self):
            return testParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = testParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (testParser.FUNCTION - 73)) | (1 << (testParser.NODE - 73)) | (1 << (testParser.GROUP - 73)) | (1 << (testParser.CONST - 73)) | (1 << (testParser.SENSOR - 73)) | (1 << (testParser.TYPE - 73)) | (1 << (testParser.OPEN - 73)) | (1 << (testParser.PACKAGE - 73)))) != 0):
                self.state = 196
                self.decls()
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(testParser.OPEN, 0)

        def path(self):
            return self.getTypedRuleContext(testParser.PathContext,0)


        def SEMI(self):
            return self.getToken(testParser.SEMI, 0)

        def package_decl(self):
            return self.getTypedRuleContext(testParser.Package_declContext,0)


        def group_block(self):
            return self.getTypedRuleContext(testParser.Group_blockContext,0)


        def const_block(self):
            return self.getTypedRuleContext(testParser.Const_blockContext,0)


        def sensor_block(self):
            return self.getTypedRuleContext(testParser.Sensor_blockContext,0)


        def user_op_decl(self):
            return self.getTypedRuleContext(testParser.User_op_declContext,0)


        def type_block(self):
            return self.getTypedRuleContext(testParser.Type_blockContext,0)


        def getRuleIndex(self):
            return testParser.RULE_decls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecls" ):
                listener.enterDecls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecls" ):
                listener.exitDecls(self)




    def decls(self):

        localctx = testParser.DeclsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_decls)
        try:
            self.state = 212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.match(testParser.OPEN)
                self.state = 203
                self.path()
                self.state = 204
                self.match(testParser.SEMI)
                pass
            elif token in [testParser.PACKAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.package_decl()
                pass
            elif token in [testParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 207
                self.group_block()
                pass
            elif token in [testParser.CONST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 208
                self.const_block()
                pass
            elif token in [testParser.SENSOR]:
                self.enterOuterAlt(localctx, 5)
                self.state = 209
                self.sensor_block()
                pass
            elif token in [testParser.FUNCTION, testParser.NODE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 210
                self.user_op_decl()
                pass
            elif token in [testParser.TYPE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 211
                self.type_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.ID)
            else:
                return self.getToken(testParser.ID, i)

        def DOMAIN(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.DOMAIN)
            else:
                return self.getToken(testParser.DOMAIN, i)

        def getRuleIndex(self):
            return testParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = testParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(testParser.ID)
            self.state = 219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 215
                    self.match(testParser.DOMAIN)
                    self.state = 216
                    self.match(testParser.ID) 
                self.state = 221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Path_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def path(self):
            return self.getTypedRuleContext(testParser.PathContext,0)


        def DOMAIN(self):
            return self.getToken(testParser.DOMAIN, 0)

        def getRuleIndex(self):
            return testParser.RULE_path_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath_id" ):
                listener.enterPath_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath_id" ):
                listener.exitPath_id(self)




    def path_id(self):

        localctx = testParser.Path_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_path_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 222
                self.path()
                self.state = 223
                self.match(testParser.DOMAIN)


            self.state = 227
            self.match(testParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(testParser.PACKAGE, 0)

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def END(self):
            return self.getToken(testParser.END, 0)

        def SEMI(self):
            return self.getToken(testParser.SEMI, 0)

        def visibility(self):
            return self.getTypedRuleContext(testParser.VisibilityContext,0)


        def decls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.DeclsContext)
            else:
                return self.getTypedRuleContext(testParser.DeclsContext,i)


        def getRuleIndex(self):
            return testParser.RULE_package_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_decl" ):
                listener.enterPackage_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_decl" ):
                listener.exitPackage_decl(self)




    def package_decl(self):

        localctx = testParser.Package_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_package_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(testParser.PACKAGE)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.PUBLIC or _la==testParser.PRIVATE:
                self.state = 230
                self.visibility()


            self.state = 233
            self.match(testParser.ID)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (testParser.FUNCTION - 73)) | (1 << (testParser.NODE - 73)) | (1 << (testParser.GROUP - 73)) | (1 << (testParser.CONST - 73)) | (1 << (testParser.SENSOR - 73)) | (1 << (testParser.TYPE - 73)) | (1 << (testParser.OPEN - 73)) | (1 << (testParser.PACKAGE - 73)))) != 0):
                self.state = 234
                self.decls()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.match(testParser.END)
            self.state = 241
            self.match(testParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(testParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(testParser.PRIVATE, 0)

        def getRuleIndex(self):
            return testParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = testParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            _la = self._input.LA(1)
            if not(_la==testParser.PUBLIC or _la==testParser.PRIVATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(testParser.IMPORT, 0)

        def getRuleIndex(self):
            return testParser.RULE_external

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal" ):
                listener.enterExternal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal" ):
                listener.exitExternal(self)




    def external(self):

        localctx = testParser.ExternalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_external)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(testParser.IMPORT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_statusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def visibility(self):
            return self.getTypedRuleContext(testParser.VisibilityContext,0)


        def external(self):
            return self.getTypedRuleContext(testParser.ExternalContext,0)


        def getRuleIndex(self):
            return testParser.RULE_interface_status

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_status" ):
                listener.enterInterface_status(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_status" ):
                listener.exitInterface_status(self)




    def interface_status(self):

        localctx = testParser.Interface_statusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_interface_status)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.PUBLIC or _la==testParser.PRIVATE:
                self.state = 247
                self.visibility()


            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.IMPORT:
                self.state = 250
                self.external()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(testParser.TYPE, 0)

        def type_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Type_declContext)
            else:
                return self.getTypedRuleContext(testParser.Type_declContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def getRuleIndex(self):
            return testParser.RULE_type_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_block" ):
                listener.enterType_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_block" ):
                listener.exitType_block(self)




    def type_block(self):

        localctx = testParser.Type_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_type_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(testParser.TYPE)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (testParser.IMPORT - 83)) | (1 << (testParser.PUBLIC - 83)) | (1 << (testParser.PRIVATE - 83)) | (1 << (testParser.ID - 83)))) != 0):
                self.state = 254
                self.type_decl()
                self.state = 255
                self.match(testParser.SEMI)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_status(self):
            return self.getTypedRuleContext(testParser.Interface_statusContext,0)


        def ID(self):
            return self.getToken(testParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(testParser.ASSIGN, 0)

        def type_def(self):
            return self.getTypedRuleContext(testParser.Type_defContext,0)


        def IS(self):
            return self.getToken(testParser.IS, 0)

        def numeric_kind(self):
            return self.getTypedRuleContext(testParser.Numeric_kindContext,0)


        def getRuleIndex(self):
            return testParser.RULE_type_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_decl" ):
                listener.enterType_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_decl" ):
                listener.exitType_decl(self)




    def type_decl(self):

        localctx = testParser.Type_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_type_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.interface_status()
            self.state = 263
            self.match(testParser.ID)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.ASSIGN:
                self.state = 264
                self.match(testParser.ASSIGN)
                self.state = 265
                self.type_def()


            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.IS:
                self.state = 268
                self.match(testParser.IS)
                self.state = 269
                self.numeric_kind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self):
            return self.getTypedRuleContext(testParser.NumericContext,0)


        def getRuleIndex(self):
            return testParser.RULE_numeric_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_kind" ):
                listener.enterNumeric_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_kind" ):
                listener.exitNumeric_kind(self)




    def numeric_kind(self):

        localctx = testParser.Numeric_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_numeric_kind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT32(self):
            return self.getToken(testParser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(testParser.FLOAT64, 0)

        def INT8(self):
            return self.getToken(testParser.INT8, 0)

        def INT16(self):
            return self.getToken(testParser.INT16, 0)

        def INT32(self):
            return self.getToken(testParser.INT32, 0)

        def INT64(self):
            return self.getToken(testParser.INT64, 0)

        def UINT8(self):
            return self.getToken(testParser.UINT8, 0)

        def UINT16(self):
            return self.getToken(testParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(testParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(testParser.UINT64, 0)

        def getRuleIndex(self):
            return testParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)




    def numeric(self):

        localctx = testParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << testParser.FLOAT32) | (1 << testParser.FLOAT64) | (1 << testParser.INT8) | (1 << testParser.INT16) | (1 << testParser.INT32) | (1 << testParser.INT64) | (1 << testParser.UINT8) | (1 << testParser.UINT16) | (1 << testParser.UINT32) | (1 << testParser.UINT64))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MyintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed(self):
            return self.getTypedRuleContext(testParser.SignedContext,0)


        def unsigned(self):
            return self.getTypedRuleContext(testParser.UnsignedContext,0)


        def getRuleIndex(self):
            return testParser.RULE_myint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMyint" ):
                listener.enterMyint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMyint" ):
                listener.exitMyint(self)




    def myint(self):

        localctx = testParser.MyintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_myint)
        try:
            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.INT8, testParser.INT16, testParser.INT32, testParser.INT64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.signed()
                pass
            elif token in [testParser.UINT8, testParser.UINT16, testParser.UINT32, testParser.UINT64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.unsigned()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MyfloatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT32(self):
            return self.getToken(testParser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(testParser.FLOAT64, 0)

        def getRuleIndex(self):
            return testParser.RULE_myfloat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMyfloat" ):
                listener.enterMyfloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMyfloat" ):
                listener.exitMyfloat(self)




    def myfloat(self):

        localctx = testParser.MyfloatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_myfloat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            _la = self._input.LA(1)
            if not(_la==testParser.FLOAT32 or _la==testParser.FLOAT64):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT8(self):
            return self.getToken(testParser.INT8, 0)

        def INT16(self):
            return self.getToken(testParser.INT16, 0)

        def INT32(self):
            return self.getToken(testParser.INT32, 0)

        def INT64(self):
            return self.getToken(testParser.INT64, 0)

        def getRuleIndex(self):
            return testParser.RULE_signed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned" ):
                listener.enterSigned(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned" ):
                listener.exitSigned(self)




    def signed(self):

        localctx = testParser.SignedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_signed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << testParser.INT8) | (1 << testParser.INT16) | (1 << testParser.INT32) | (1 << testParser.INT64))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UINT8(self):
            return self.getToken(testParser.UINT8, 0)

        def UINT16(self):
            return self.getToken(testParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(testParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(testParser.UINT64, 0)

        def getRuleIndex(self):
            return testParser.RULE_unsigned

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned" ):
                listener.enterUnsigned(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned" ):
                listener.exitUnsigned(self)




    def unsigned(self):

        localctx = testParser.UnsignedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_unsigned)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << testParser.UINT8) | (1 << testParser.UINT16) | (1 << testParser.UINT32) | (1 << testParser.UINT64))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_expr(self):
            return self.getTypedRuleContext(testParser.Type_exprContext,0)


        def ENUM(self):
            return self.getToken(testParser.ENUM, 0)

        def OPEN_BRACE(self):
            return self.getToken(testParser.OPEN_BRACE, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.ID)
            else:
                return self.getToken(testParser.ID, i)

        def CLOSE_BRACE(self):
            return self.getToken(testParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_def" ):
                listener.enterType_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_def" ):
                listener.exitType_def(self)




    def type_def(self):

        localctx = testParser.Type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_type_def)
        self._la = 0 # Token type
        try:
            self.state = 298
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.FLOAT32, testParser.FLOAT64, testParser.INT8, testParser.INT16, testParser.INT32, testParser.INT64, testParser.UINT8, testParser.UINT16, testParser.UINT32, testParser.UINT64, testParser.CHAR, testParser.BOOL, testParser.OPEN_BRACE, testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 286
                self.type_expr(0)
                pass
            elif token in [testParser.ENUM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.match(testParser.ENUM)
                self.state = 288
                self.match(testParser.OPEN_BRACE)
                self.state = 289
                self.match(testParser.ID)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.COMMA:
                    self.state = 290
                    self.match(testParser.COMMA)
                    self.state = 291
                    self.match(testParser.ID)
                    self.state = 296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 297
                self.match(testParser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(testParser.BOOL, 0)

        def numeric(self):
            return self.getTypedRuleContext(testParser.NumericContext,0)


        def CHAR(self):
            return self.getToken(testParser.CHAR, 0)

        def typevar(self):
            return self.getTypedRuleContext(testParser.TypevarContext,0)


        def path_id(self):
            return self.getTypedRuleContext(testParser.Path_idContext,0)


        def OPEN_BRACE(self):
            return self.getToken(testParser.OPEN_BRACE, 0)

        def field_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Field_declContext)
            else:
                return self.getTypedRuleContext(testParser.Field_declContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(testParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def type_expr(self):
            return self.getTypedRuleContext(testParser.Type_exprContext,0)


        def CIRCUMFLEX(self):
            return self.getToken(testParser.CIRCUMFLEX, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_type_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_expr" ):
                listener.enterType_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_expr" ):
                listener.exitType_expr(self)



    def type_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = testParser.Type_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_type_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 301
                self.match(testParser.BOOL)
                pass

            elif la_ == 2:
                self.state = 302
                self.numeric()
                pass

            elif la_ == 3:
                self.state = 303
                self.match(testParser.CHAR)
                pass

            elif la_ == 4:
                self.state = 304
                self.typevar()
                pass

            elif la_ == 5:
                self.state = 305
                self.path_id()
                pass

            elif la_ == 6:
                self.state = 306
                self.match(testParser.OPEN_BRACE)
                self.state = 307
                self.field_decl()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.COMMA:
                    self.state = 308
                    self.match(testParser.COMMA)
                    self.state = 309
                    self.field_decl()
                    self.state = 314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 315
                self.match(testParser.CLOSE_BRACE)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 324
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = testParser.Type_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type_expr)
                    self.state = 319
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 320
                    self.match(testParser.CIRCUMFLEX)
                    self.state = 321
                    self.expr(0) 
                self.state = 326
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Field_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def type_expr(self):
            return self.getTypedRuleContext(testParser.Type_exprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_field_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_decl" ):
                listener.enterField_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_decl" ):
                listener.exitField_decl(self)




    def field_decl(self):

        localctx = testParser.Field_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_field_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(testParser.ID)
            self.state = 328
            self.match(testParser.COLON)
            self.state = 329
            self.type_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypevarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def getRuleIndex(self):
            return testParser.RULE_typevar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypevar" ):
                listener.enterTypevar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypevar" ):
                listener.exitTypevar(self)




    def typevar(self):

        localctx = testParser.TypevarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typevar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(testParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(testParser.GROUP, 0)

        def group_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Group_declContext)
            else:
                return self.getTypedRuleContext(testParser.Group_declContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def getRuleIndex(self):
            return testParser.RULE_group_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_block" ):
                listener.enterGroup_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_block" ):
                listener.exitGroup_block(self)




    def group_block(self):

        localctx = testParser.Group_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(testParser.GROUP)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (testParser.PUBLIC - 93)) | (1 << (testParser.PRIVATE - 93)) | (1 << (testParser.ID - 93)))) != 0):
                self.state = 334
                self.group_decl()
                self.state = 335
                self.match(testParser.SEMI)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(testParser.ASSIGN, 0)

        def group_expr(self):
            return self.getTypedRuleContext(testParser.Group_exprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(testParser.VisibilityContext,0)


        def getRuleIndex(self):
            return testParser.RULE_group_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_decl" ):
                listener.enterGroup_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_decl" ):
                listener.exitGroup_decl(self)




    def group_decl(self):

        localctx = testParser.Group_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_group_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.PUBLIC or _la==testParser.PRIVATE:
                self.state = 342
                self.visibility()


            self.state = 345
            self.match(testParser.ID)
            self.state = 346
            self.match(testParser.ASSIGN)
            self.state = 347
            self.group_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def type_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Type_exprContext)
            else:
                return self.getTypedRuleContext(testParser.Type_exprContext,i)


        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_group_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_expr" ):
                listener.enterGroup_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_expr" ):
                listener.exitGroup_expr(self)




    def group_expr(self):

        localctx = testParser.Group_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_group_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(testParser.LPAREN)
            self.state = 350
            self.type_expr(0)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==testParser.COMMA:
                self.state = 351
                self.match(testParser.COMMA)
                self.state = 352
                self.type_expr(0)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 358
            self.match(testParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(testParser.CONST, 0)

        def const_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Const_declContext)
            else:
                return self.getTypedRuleContext(testParser.Const_declContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def getRuleIndex(self):
            return testParser.RULE_const_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_block" ):
                listener.enterConst_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_block" ):
                listener.exitConst_block(self)




    def const_block(self):

        localctx = testParser.Const_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_const_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(testParser.CONST)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (testParser.IMPORT - 83)) | (1 << (testParser.PUBLIC - 83)) | (1 << (testParser.PRIVATE - 83)) | (1 << (testParser.ID - 83)))) != 0):
                self.state = 361
                self.const_decl()
                self.state = 362
                self.match(testParser.SEMI)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_status(self):
            return self.getTypedRuleContext(testParser.Interface_statusContext,0)


        def ID(self):
            return self.getToken(testParser.ID, 0)

        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def type_expr(self):
            return self.getTypedRuleContext(testParser.Type_exprContext,0)


        def ASSIGN(self):
            return self.getToken(testParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_const_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_decl" ):
                listener.enterConst_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_decl" ):
                listener.exitConst_decl(self)




    def const_decl(self):

        localctx = testParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_const_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.interface_status()
            self.state = 370
            self.match(testParser.ID)
            self.state = 371
            self.match(testParser.COLON)
            self.state = 372
            self.type_expr(0)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.ASSIGN:
                self.state = 373
                self.match(testParser.ASSIGN)
                self.state = 374
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sensor_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SENSOR(self):
            return self.getToken(testParser.SENSOR, 0)

        def sensor_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Sensor_declContext)
            else:
                return self.getTypedRuleContext(testParser.Sensor_declContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def getRuleIndex(self):
            return testParser.RULE_sensor_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSensor_block" ):
                listener.enterSensor_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSensor_block" ):
                listener.exitSensor_block(self)




    def sensor_block(self):

        localctx = testParser.Sensor_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sensor_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(testParser.SENSOR)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==testParser.ID:
                self.state = 378
                self.sensor_decl()
                self.state = 379
                self.match(testParser.SEMI)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sensor_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.ID)
            else:
                return self.getToken(testParser.ID, i)

        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def type_expr(self):
            return self.getTypedRuleContext(testParser.Type_exprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_sensor_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSensor_decl" ):
                listener.enterSensor_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSensor_decl" ):
                listener.exitSensor_decl(self)




    def sensor_decl(self):

        localctx = testParser.Sensor_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_sensor_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(testParser.ID)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==testParser.COMMA:
                self.state = 387
                self.match(testParser.COMMA)
                self.state = 388
                self.match(testParser.ID)
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 394
            self.match(testParser.COLON)
            self.state = 395
            self.type_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Var_idContext)
            else:
                return self.getTypedRuleContext(testParser.Var_idContext,i)


        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def type_expr(self):
            return self.getTypedRuleContext(testParser.Type_exprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def when_decl(self):
            return self.getTypedRuleContext(testParser.When_declContext,0)


        def default_decl(self):
            return self.getTypedRuleContext(testParser.Default_declContext,0)


        def last_decl(self):
            return self.getTypedRuleContext(testParser.Last_declContext,0)


        def getRuleIndex(self):
            return testParser.RULE_var_decls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decls" ):
                listener.enterVar_decls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decls" ):
                listener.exitVar_decls(self)




    def var_decls(self):

        localctx = testParser.Var_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_var_decls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.var_id()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==testParser.COMMA:
                self.state = 398
                self.match(testParser.COMMA)
                self.state = 399
                self.var_id()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 405
            self.match(testParser.COLON)
            self.state = 406
            self.type_expr(0)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.WHEN:
                self.state = 407
                self.when_decl()


            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.DEFAULT:
                self.state = 410
                self.default_decl()


            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.LAST:
                self.state = 413
                self.last_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def CLOCK(self):
            return self.getToken(testParser.CLOCK, 0)

        def PROBE(self):
            return self.getToken(testParser.PROBE, 0)

        def getRuleIndex(self):
            return testParser.RULE_var_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_id" ):
                listener.enterVar_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_id" ):
                listener.exitVar_id(self)




    def var_id(self):

        localctx = testParser.Var_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_var_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.CLOCK:
                self.state = 416
                self.match(testParser.CLOCK)


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.PROBE:
                self.state = 419
                self.match(testParser.PROBE)


            self.state = 422
            self.match(testParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(testParser.WHEN, 0)

        def clock_expr(self):
            return self.getTypedRuleContext(testParser.Clock_exprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_when_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_decl" ):
                listener.enterWhen_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_decl" ):
                listener.exitWhen_decl(self)




    def when_decl(self):

        localctx = testParser.When_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_when_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(testParser.WHEN)
            self.state = 425
            self.clock_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(testParser.DEFAULT, 0)

        def ASSIGN(self):
            return self.getToken(testParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_default_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_decl" ):
                listener.enterDefault_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_decl" ):
                listener.exitDefault_decl(self)




    def default_decl(self):

        localctx = testParser.Default_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_default_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(testParser.DEFAULT)
            self.state = 428
            self.match(testParser.ASSIGN)
            self.state = 429
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST(self):
            return self.getToken(testParser.LAST, 0)

        def ASSIGN(self):
            return self.getToken(testParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_last_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_decl" ):
                listener.enterLast_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_decl" ):
                listener.exitLast_decl(self)




    def last_decl(self):

        localctx = testParser.Last_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_last_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(testParser.LAST)
            self.state = 432
            self.match(testParser.ASSIGN)
            self.state = 433
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_op_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op_kind(self):
            return self.getTypedRuleContext(testParser.Op_kindContext,0)


        def interface_status(self):
            return self.getTypedRuleContext(testParser.Interface_statusContext,0)


        def ID(self):
            return self.getToken(testParser.ID, 0)

        def params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ParamsContext)
            else:
                return self.getTypedRuleContext(testParser.ParamsContext,i)


        def RETURN(self):
            return self.getToken(testParser.RETURN, 0)

        def opt_body(self):
            return self.getTypedRuleContext(testParser.Opt_bodyContext,0)


        def size_decl(self):
            return self.getTypedRuleContext(testParser.Size_declContext,0)


        def where_decl(self):
            return self.getTypedRuleContext(testParser.Where_declContext,0)


        def spec_decl(self):
            return self.getTypedRuleContext(testParser.Spec_declContext,0)


        def getRuleIndex(self):
            return testParser.RULE_user_op_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_op_decl" ):
                listener.enterUser_op_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_op_decl" ):
                listener.exitUser_op_decl(self)




    def user_op_decl(self):

        localctx = testParser.User_op_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_user_op_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.op_kind()
            self.state = 436
            self.interface_status()
            self.state = 437
            self.match(testParser.ID)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.LDLT:
                self.state = 438
                self.size_decl()


            self.state = 441
            self.params()
            self.state = 442
            self.match(testParser.RETURN)
            self.state = 443
            self.params()
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.WHERE:
                self.state = 444
                self.where_decl()


            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.SPECIALIZE:
                self.state = 447
                self.spec_decl()


            self.state = 450
            self.opt_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(testParser.FUNCTION, 0)

        def NODE(self):
            return self.getToken(testParser.NODE, 0)

        def getRuleIndex(self):
            return testParser.RULE_op_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp_kind" ):
                listener.enterOp_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp_kind" ):
                listener.exitOp_kind(self)




    def op_kind(self):

        localctx = testParser.Op_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_op_kind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            _la = self._input.LA(1)
            if not(_la==testParser.FUNCTION or _la==testParser.NODE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Size_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LDLT(self):
            return self.getToken(testParser.LDLT, 0)

        def RDGT(self):
            return self.getToken(testParser.RDGT, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.ID)
            else:
                return self.getToken(testParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_size_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize_decl" ):
                listener.enterSize_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize_decl" ):
                listener.exitSize_decl(self)




    def size_decl(self):

        localctx = testParser.Size_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_size_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(testParser.LDLT)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.ID:
                self.state = 455
                self.match(testParser.ID)
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.COMMA:
                    self.state = 456
                    self.match(testParser.COMMA)
                    self.state = 457
                    self.match(testParser.ID)
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 465
            self.match(testParser.RDGT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def var_decls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Var_declsContext)
            else:
                return self.getTypedRuleContext(testParser.Var_declsContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def getRuleIndex(self):
            return testParser.RULE_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams" ):
                listener.enterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams" ):
                listener.exitParams(self)




    def params(self):

        localctx = testParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(testParser.LPAREN)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (testParser.CLOCK - 79)) | (1 << (testParser.PROBE - 79)) | (1 << (testParser.ID - 79)))) != 0):
                self.state = 468
                self.var_decls()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.SEMI:
                    self.state = 469
                    self.match(testParser.SEMI)
                    self.state = 470
                    self.var_decls()
                    self.state = 475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 478
            self.match(testParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(testParser.WHERE, 0)

        def typevar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.TypevarContext)
            else:
                return self.getTypedRuleContext(testParser.TypevarContext,i)


        def numeric_kind(self):
            return self.getTypedRuleContext(testParser.Numeric_kindContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_where_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_decl" ):
                listener.enterWhere_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_decl" ):
                listener.exitWhere_decl(self)




    def where_decl(self):

        localctx = testParser.Where_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_where_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(testParser.WHERE)
            self.state = 481
            self.typevar()
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==testParser.COMMA:
                self.state = 482
                self.match(testParser.COMMA)
                self.state = 483
                self.typevar()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 489
            self.numeric_kind()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spec_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPECIALIZE(self):
            return self.getToken(testParser.SPECIALIZE, 0)

        def path_id(self):
            return self.getTypedRuleContext(testParser.Path_idContext,0)


        def getRuleIndex(self):
            return testParser.RULE_spec_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpec_decl" ):
                listener.enterSpec_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpec_decl" ):
                listener.exitSpec_decl(self)




    def spec_decl(self):

        localctx = testParser.Spec_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_spec_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(testParser.SPECIALIZE)
            self.state = 492
            self.path_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.EquationContext)
            else:
                return self.getTypedRuleContext(testParser.EquationContext,i)


        def LET(self):
            return self.getToken(testParser.LET, 0)

        def TEL(self):
            return self.getToken(testParser.TEL, 0)

        def signal_block(self):
            return self.getTypedRuleContext(testParser.Signal_blockContext,0)


        def local_block(self):
            return self.getTypedRuleContext(testParser.Local_blockContext,0)


        def getRuleIndex(self):
            return testParser.RULE_opt_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_body" ):
                listener.enterOpt_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_body" ):
                listener.exitOpt_body(self)




    def opt_body(self):

        localctx = testParser.Opt_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_opt_body)
        self._la = 0 # Token type
        try:
            self.state = 517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.SEMI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.match(testParser.SEMI)
                pass
            elif token in [testParser.AUTOMATON, testParser.ACTIVATE, testParser.EMIT, testParser.ASSUME, testParser.GUARANTEE, testParser.LPAREN, testParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.equation()
                self.state = 496
                self.match(testParser.SEMI)
                pass
            elif token in [testParser.SIG, testParser.VAR, testParser.LET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.SIG:
                    self.state = 498
                    self.signal_block()


                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.VAR:
                    self.state = 501
                    self.local_block()


                self.state = 504
                self.match(testParser.LET)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (testParser.AUTOMATON - 52)) | (1 << (testParser.ACTIVATE - 52)) | (1 << (testParser.EMIT - 52)) | (1 << (testParser.ASSUME - 52)) | (1 << (testParser.GUARANTEE - 52)))) != 0) or _la==testParser.LPAREN or _la==testParser.ID:
                    self.state = 505
                    self.equation()
                    self.state = 506
                    self.match(testParser.SEMI)
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 513
                self.match(testParser.TEL)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.SEMI:
                    self.state = 514
                    self.match(testParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self):
            return self.getTypedRuleContext(testParser.EquationContext,0)


        def SEMI(self):
            return self.getToken(testParser.SEMI, 0)

        def scope(self):
            return self.getTypedRuleContext(testParser.ScopeContext,0)


        def getRuleIndex(self):
            return testParser.RULE_data_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_def" ):
                listener.enterData_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_def" ):
                listener.exitData_def(self)




    def data_def(self):

        localctx = testParser.Data_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_data_def)
        try:
            self.state = 523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.AUTOMATON, testParser.ACTIVATE, testParser.EMIT, testParser.ASSUME, testParser.GUARANTEE, testParser.LPAREN, testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 519
                self.equation()
                self.state = 520
                self.match(testParser.SEMI)
                pass
            elif token in [testParser.RESTART, testParser.RESUME, testParser.INITIAL, testParser.FINAL, testParser.STATE, testParser.UNTIL, testParser.ELSE, testParser.IF, testParser.SIG, testParser.VAR, testParser.LET, testParser.RETURN, testParser.OR_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signal_block(self):
            return self.getTypedRuleContext(testParser.Signal_blockContext,0)


        def local_block(self):
            return self.getTypedRuleContext(testParser.Local_blockContext,0)


        def eqs(self):
            return self.getTypedRuleContext(testParser.EqsContext,0)


        def getRuleIndex(self):
            return testParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)




    def scope(self):

        localctx = testParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.SIG:
                self.state = 525
                self.signal_block()


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.VAR:
                self.state = 528
                self.local_block()


            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.LET:
                self.state = 531
                self.eqs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signal_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIG(self):
            return self.getToken(testParser.SIG, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.ID)
            else:
                return self.getToken(testParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_signal_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignal_block" ):
                listener.enterSignal_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignal_block" ):
                listener.exitSignal_block(self)




    def signal_block(self):

        localctx = testParser.Signal_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_signal_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(testParser.SIG)
            self.state = 535
            self.match(testParser.ID)
            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==testParser.COMMA:
                self.state = 536
                self.match(testParser.COMMA)
                self.state = 537
                self.match(testParser.ID)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(testParser.VAR, 0)

        def var_decls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Var_declsContext)
            else:
                return self.getTypedRuleContext(testParser.Var_declsContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def getRuleIndex(self):
            return testParser.RULE_local_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_block" ):
                listener.enterLocal_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_block" ):
                listener.exitLocal_block(self)




    def local_block(self):

        localctx = testParser.Local_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_local_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(testParser.VAR)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (testParser.CLOCK - 79)) | (1 << (testParser.PROBE - 79)) | (1 << (testParser.ID - 79)))) != 0):
                self.state = 544
                self.var_decls()
                self.state = 545
                self.match(testParser.SEMI)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(testParser.LET, 0)

        def TEL(self):
            return self.getToken(testParser.TEL, 0)

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.EquationContext)
            else:
                return self.getTypedRuleContext(testParser.EquationContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def getRuleIndex(self):
            return testParser.RULE_eqs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqs" ):
                listener.enterEqs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqs" ):
                listener.exitEqs(self)




    def eqs(self):

        localctx = testParser.EqsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_eqs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(testParser.LET)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (testParser.AUTOMATON - 52)) | (1 << (testParser.ACTIVATE - 52)) | (1 << (testParser.EMIT - 52)) | (1 << (testParser.ASSUME - 52)) | (1 << (testParser.GUARANTEE - 52)))) != 0) or _la==testParser.LPAREN or _la==testParser.ID:
                self.state = 553
                self.equation()
                self.state = 554
                self.match(testParser.SEMI)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 561
            self.match(testParser.TEL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EquationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_equation(self):
            return self.getTypedRuleContext(testParser.Simple_equationContext,0)


        def myassert(self):
            return self.getTypedRuleContext(testParser.MyassertContext,0)


        def emission(self):
            return self.getTypedRuleContext(testParser.EmissionContext,0)


        def control_block(self):
            return self.getTypedRuleContext(testParser.Control_blockContext,0)


        def myreturn(self):
            return self.getTypedRuleContext(testParser.MyreturnContext,0)


        def getRuleIndex(self):
            return testParser.RULE_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation" ):
                listener.enterEquation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation" ):
                listener.exitEquation(self)




    def equation(self):

        localctx = testParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_equation)
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.LPAREN, testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.simple_equation()
                pass
            elif token in [testParser.ASSUME, testParser.GUARANTEE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.myassert()
                pass
            elif token in [testParser.EMIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 565
                self.emission()
                pass
            elif token in [testParser.AUTOMATON, testParser.ACTIVATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 566
                self.control_block()
                self.state = 567
                self.myreturn()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_equationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(testParser.LhsContext,0)


        def ASSIGN(self):
            return self.getToken(testParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_simple_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_equation" ):
                listener.enterSimple_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_equation" ):
                listener.exitSimple_equation(self)




    def simple_equation(self):

        localctx = testParser.Simple_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_simple_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.lhs()
            self.state = 572
            self.match(testParser.ASSIGN)
            self.state = 573
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Lhs_idContext)
            else:
                return self.getTypedRuleContext(testParser.Lhs_idContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def getRuleIndex(self):
            return testParser.RULE_lhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLhs" ):
                listener.enterLhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLhs" ):
                listener.exitLhs(self)




    def lhs(self):

        localctx = testParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_lhs)
        self._la = 0 # Token type
        try:
            self.state = 585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.lhs_id()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.COMMA:
                    self.state = 576
                    self.match(testParser.COMMA)
                    self.state = 577
                    self.lhs_id()
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [testParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.match(testParser.LPAREN)
                self.state = 584
                self.match(testParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lhs_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def getRuleIndex(self):
            return testParser.RULE_lhs_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLhs_id" ):
                listener.enterLhs_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLhs_id" ):
                listener.exitLhs_id(self)




    def lhs_id(self):

        localctx = testParser.Lhs_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lhs_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(testParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MyassertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSUME(self):
            return self.getToken(testParser.ASSUME, 0)

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def GUARANTEE(self):
            return self.getToken(testParser.GUARANTEE, 0)

        def getRuleIndex(self):
            return testParser.RULE_myassert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMyassert" ):
                listener.enterMyassert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMyassert" ):
                listener.exitMyassert(self)




    def myassert(self):

        localctx = testParser.MyassertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_myassert)
        try:
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.ASSUME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.match(testParser.ASSUME)
                self.state = 590
                self.match(testParser.ID)
                self.state = 591
                self.match(testParser.COLON)
                self.state = 592
                self.expr(0)
                pass
            elif token in [testParser.GUARANTEE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.match(testParser.GUARANTEE)
                self.state = 594
                self.match(testParser.ID)
                self.state = 595
                self.match(testParser.COLON)
                self.state = 596
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Control_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def state_machine(self):
            return self.getTypedRuleContext(testParser.State_machineContext,0)


        def clocked_block(self):
            return self.getTypedRuleContext(testParser.Clocked_blockContext,0)


        def getRuleIndex(self):
            return testParser.RULE_control_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControl_block" ):
                listener.enterControl_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControl_block" ):
                listener.exitControl_block(self)




    def control_block(self):

        localctx = testParser.Control_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_control_block)
        try:
            self.state = 601
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.AUTOMATON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.state_machine()
                pass
            elif token in [testParser.ACTIVATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.clocked_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmissionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EMIT(self):
            return self.getToken(testParser.EMIT, 0)

        def emission_body(self):
            return self.getTypedRuleContext(testParser.Emission_bodyContext,0)


        def getRuleIndex(self):
            return testParser.RULE_emission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmission" ):
                listener.enterEmission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmission" ):
                listener.exitEmission(self)




    def emission(self):

        localctx = testParser.EmissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_emission)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(testParser.EMIT)
            self.state = 604
            self.emission_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Emission_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.ID)
            else:
                return self.getToken(testParser.ID, i)

        def IF(self):
            return self.getToken(testParser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_emission_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmission_body" ):
                listener.enterEmission_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmission_body" ):
                listener.exitEmission_body(self)




    def emission_body(self):

        localctx = testParser.Emission_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_emission_body)
        self._la = 0 # Token type
        try:
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.match(testParser.ID)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.IF:
                    self.state = 607
                    self.match(testParser.IF)
                    self.state = 608
                    self.expr(0)


                pass
            elif token in [testParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.match(testParser.LPAREN)
                self.state = 612
                self.match(testParser.ID)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.COMMA:
                    self.state = 613
                    self.match(testParser.COMMA)
                    self.state = 614
                    self.match(testParser.ID)
                    self.state = 619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 620
                self.match(testParser.RPAREN)

                self.state = 621
                self.match(testParser.IF)
                self.state = 622
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MyreturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(testParser.RETURN, 0)

        def returns_var(self):
            return self.getTypedRuleContext(testParser.Returns_varContext,0)


        def getRuleIndex(self):
            return testParser.RULE_myreturn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMyreturn" ):
                listener.enterMyreturn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMyreturn" ):
                listener.exitMyreturn(self)




    def myreturn(self):

        localctx = testParser.MyreturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_myreturn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(testParser.RETURN)
            self.state = 626
            self.returns_var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.ID)
            else:
                return self.getToken(testParser.ID, i)

        def ELLIPSIS(self):
            return self.getToken(testParser.ELLIPSIS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_returns_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_var" ):
                listener.enterReturns_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_var" ):
                listener.exitReturns_var(self)




    def returns_var(self):

        localctx = testParser.Returns_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_returns_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 628
                    self.match(testParser.ID)
                    self.state = 629
                    self.match(testParser.COMMA) 
                self.state = 634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 635
            _la = self._input.LA(1)
            if not(_la==testParser.ELLIPSIS or _la==testParser.ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clocked_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTIVATE(self):
            return self.getToken(testParser.ACTIVATE, 0)

        def if_block(self):
            return self.getTypedRuleContext(testParser.If_blockContext,0)


        def match_block(self):
            return self.getTypedRuleContext(testParser.Match_blockContext,0)


        def ID(self):
            return self.getToken(testParser.ID, 0)

        def getRuleIndex(self):
            return testParser.RULE_clocked_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClocked_block" ):
                listener.enterClocked_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClocked_block" ):
                listener.exitClocked_block(self)




    def clocked_block(self):

        localctx = testParser.Clocked_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_clocked_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(testParser.ACTIVATE)
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.ID:
                self.state = 638
                self.match(testParser.ID)


            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.IF]:
                self.state = 641
                self.if_block()
                pass
            elif token in [testParser.WHEN]:
                self.state = 642
                self.match_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(testParser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def THEN(self):
            return self.getToken(testParser.THEN, 0)

        def ELSE(self):
            return self.getToken(testParser.ELSE, 0)

        def data_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Data_defContext)
            else:
                return self.getTypedRuleContext(testParser.Data_defContext,i)


        def if_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.If_blockContext)
            else:
                return self.getTypedRuleContext(testParser.If_blockContext,i)


        def getRuleIndex(self):
            return testParser.RULE_if_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_block" ):
                listener.enterIf_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_block" ):
                listener.exitIf_block(self)




    def if_block(self):

        localctx = testParser.If_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_if_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(testParser.IF)
            self.state = 646
            self.expr(0)
            self.state = 647
            self.match(testParser.THEN)
            self.state = 650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.AUTOMATON, testParser.ELSE, testParser.ACTIVATE, testParser.EMIT, testParser.ASSUME, testParser.GUARANTEE, testParser.SIG, testParser.VAR, testParser.LET, testParser.LPAREN, testParser.ID]:
                self.state = 648
                self.data_def()
                pass
            elif token in [testParser.IF]:
                self.state = 649
                self.if_block()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 652
            self.match(testParser.ELSE)
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.AUTOMATON, testParser.ELSE, testParser.ACTIVATE, testParser.EMIT, testParser.ASSUME, testParser.GUARANTEE, testParser.SIG, testParser.VAR, testParser.LET, testParser.RETURN, testParser.LPAREN, testParser.ID]:
                self.state = 653
                self.data_def()
                pass
            elif token in [testParser.IF]:
                self.state = 654
                self.if_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(testParser.WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def MATCH(self):
            return self.getToken(testParser.MATCH, 0)

        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.OR_OP)
            else:
                return self.getToken(testParser.OR_OP, i)

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.PatternContext)
            else:
                return self.getTypedRuleContext(testParser.PatternContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COLON)
            else:
                return self.getToken(testParser.COLON, i)

        def data_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Data_defContext)
            else:
                return self.getTypedRuleContext(testParser.Data_defContext,i)


        def getRuleIndex(self):
            return testParser.RULE_match_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_block" ):
                listener.enterMatch_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_block" ):
                listener.exitMatch_block(self)




    def match_block(self):

        localctx = testParser.Match_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_match_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(testParser.WHEN)
            self.state = 658
            self.expr(0)
            self.state = 659
            self.match(testParser.MATCH)
            self.state = 665 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 660
                self.match(testParser.OR_OP)
                self.state = 661
                self.pattern()
                self.state = 662
                self.match(testParser.COLON)
                self.state = 663
                self.data_def()
                self.state = 667 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==testParser.OR_OP):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_machineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTOMATON(self):
            return self.getToken(testParser.AUTOMATON, 0)

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def state_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.State_declContext)
            else:
                return self.getTypedRuleContext(testParser.State_declContext,i)


        def getRuleIndex(self):
            return testParser.RULE_state_machine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_machine" ):
                listener.enterState_machine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_machine" ):
                listener.exitState_machine(self)




    def state_machine(self):

        localctx = testParser.State_machineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_state_machine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(testParser.AUTOMATON)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.ID:
                self.state = 670
                self.match(testParser.ID)


            self.state = 674 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 673
                self.state_decl()
                self.state = 676 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << testParser.INITIAL) | (1 << testParser.FINAL) | (1 << testParser.STATE))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATE(self):
            return self.getToken(testParser.STATE, 0)

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def data_def(self):
            return self.getTypedRuleContext(testParser.Data_defContext,0)


        def INITIAL(self):
            return self.getToken(testParser.INITIAL, 0)

        def FINAL(self):
            return self.getToken(testParser.FINAL, 0)

        def UNLESS(self):
            return self.getToken(testParser.UNLESS, 0)

        def UNTIL(self):
            return self.getToken(testParser.UNTIL, 0)

        def transition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.TransitionContext)
            else:
                return self.getTypedRuleContext(testParser.TransitionContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def SYNCHRO(self):
            return self.getToken(testParser.SYNCHRO, 0)

        def fork(self):
            return self.getTypedRuleContext(testParser.ForkContext,0)


        def actions(self):
            return self.getTypedRuleContext(testParser.ActionsContext,0)


        def getRuleIndex(self):
            return testParser.RULE_state_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_decl" ):
                listener.enterState_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_decl" ):
                listener.exitState_decl(self)




    def state_decl(self):

        localctx = testParser.State_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_state_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.INITIAL:
                self.state = 678
                self.match(testParser.INITIAL)


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.FINAL:
                self.state = 681
                self.match(testParser.FINAL)


            self.state = 684
            self.match(testParser.STATE)
            self.state = 685
            self.match(testParser.ID)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.UNLESS:
                self.state = 686
                self.match(testParser.UNLESS)
                self.state = 690 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 687
                    self.transition()
                    self.state = 688
                    self.match(testParser.SEMI)
                    self.state = 692 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==testParser.IF):
                        break



            self.state = 696
            self.data_def()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.UNTIL:
                self.state = 697
                self.match(testParser.UNTIL)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.IF:
                    self.state = 698
                    self.transition()
                    self.state = 699
                    self.match(testParser.SEMI)
                    self.state = 705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.SYNCHRO:
                    self.state = 706
                    self.match(testParser.SYNCHRO)
                    self.state = 708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==testParser.DO:
                        self.state = 707
                        self.actions()


                    self.state = 710
                    self.fork()
                    self.state = 711
                    self.match(testParser.SEMI)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(testParser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def arrow(self):
            return self.getTypedRuleContext(testParser.ArrowContext,0)


        def getRuleIndex(self):
            return testParser.RULE_transition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransition" ):
                listener.enterTransition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransition" ):
                listener.exitTransition(self)




    def transition(self):

        localctx = testParser.TransitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_transition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(testParser.IF)
            self.state = 718
            self.expr(0)
            self.state = 719
            self.arrow()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fork(self):
            return self.getTypedRuleContext(testParser.ForkContext,0)


        def actions(self):
            return self.getTypedRuleContext(testParser.ActionsContext,0)


        def getRuleIndex(self):
            return testParser.RULE_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrow" ):
                listener.enterArrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrow" ):
                listener.exitArrow(self)




    def arrow(self):

        localctx = testParser.ArrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_arrow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==testParser.DO:
                self.state = 721
                self.actions()


            self.state = 724
            self.fork()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target(self):
            return self.getTypedRuleContext(testParser.TargetContext,0)


        def IF(self):
            return self.getToken(testParser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def arrow(self):
            return self.getTypedRuleContext(testParser.ArrowContext,0)


        def END(self):
            return self.getToken(testParser.END, 0)

        def elif_fork(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Elif_forkContext)
            else:
                return self.getTypedRuleContext(testParser.Elif_forkContext,i)


        def else_fork(self):
            return self.getTypedRuleContext(testParser.Else_forkContext,0)


        def getRuleIndex(self):
            return testParser.RULE_fork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFork" ):
                listener.enterFork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFork" ):
                listener.exitFork(self)




    def fork(self):

        localctx = testParser.ForkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fork)
        self._la = 0 # Token type
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.RESTART, testParser.RESUME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.target()
                pass
            elif token in [testParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.match(testParser.IF)
                self.state = 728
                self.expr(0)
                self.state = 729
                self.arrow()
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.ELIF:
                    self.state = 730
                    self.elif_fork()
                    self.state = 735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.ELSE:
                    self.state = 736
                    self.else_fork()


                self.state = 739
                self.match(testParser.END)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_forkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(testParser.ELIF, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def arrow(self):
            return self.getTypedRuleContext(testParser.ArrowContext,0)


        def getRuleIndex(self):
            return testParser.RULE_elif_fork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_fork" ):
                listener.enterElif_fork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_fork" ):
                listener.exitElif_fork(self)




    def elif_fork(self):

        localctx = testParser.Elif_forkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elif_fork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(testParser.ELIF)
            self.state = 744
            self.expr(0)
            self.state = 745
            self.arrow()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_forkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(testParser.ELSE, 0)

        def arrow(self):
            return self.getTypedRuleContext(testParser.ArrowContext,0)


        def getRuleIndex(self):
            return testParser.RULE_else_fork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_fork" ):
                listener.enterElse_fork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_fork" ):
                listener.exitElse_fork(self)




    def else_fork(self):

        localctx = testParser.Else_forkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_else_fork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(testParser.ELSE)
            self.state = 748
            self.arrow()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART(self):
            return self.getToken(testParser.RESTART, 0)

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def RESUME(self):
            return self.getToken(testParser.RESUME, 0)

        def getRuleIndex(self):
            return testParser.RULE_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget" ):
                listener.enterTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget" ):
                listener.exitTarget(self)




    def target(self):

        localctx = testParser.TargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_target)
        try:
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.RESTART]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.match(testParser.RESTART)
                self.state = 751
                self.match(testParser.ID)
                pass
            elif token in [testParser.RESUME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.match(testParser.RESUME)
                self.state = 753
                self.match(testParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(testParser.DO, 0)

        def OPEN_BRACE(self):
            return self.getToken(testParser.OPEN_BRACE, 0)

        def emission_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Emission_bodyContext)
            else:
                return self.getTypedRuleContext(testParser.Emission_bodyContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(testParser.CLOSE_BRACE, 0)

        def EMIT(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.EMIT)
            else:
                return self.getToken(testParser.EMIT, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def data_def(self):
            return self.getTypedRuleContext(testParser.Data_defContext,0)


        def getRuleIndex(self):
            return testParser.RULE_actions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActions" ):
                listener.enterActions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActions" ):
                listener.exitActions(self)




    def actions(self):

        localctx = testParser.ActionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_actions)
        self._la = 0 # Token type
        try:
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.match(testParser.DO)
                self.state = 757
                self.match(testParser.OPEN_BRACE)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.EMIT:
                    self.state = 758
                    self.match(testParser.EMIT)


                self.state = 761
                self.emission_body()
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.SEMI:
                    self.state = 762
                    self.match(testParser.SEMI)
                    self.state = 764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==testParser.EMIT:
                        self.state = 763
                        self.match(testParser.EMIT)


                    self.state = 766
                    self.emission_body()
                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 772
                self.match(testParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.match(testParser.DO)
                self.state = 775
                self.data_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clock_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def NOT(self):
            return self.getToken(testParser.NOT, 0)

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def MATCH(self):
            return self.getToken(testParser.MATCH, 0)

        def pattern(self):
            return self.getTypedRuleContext(testParser.PatternContext,0)


        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def getRuleIndex(self):
            return testParser.RULE_clock_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClock_expr" ):
                listener.enterClock_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClock_expr" ):
                listener.exitClock_expr(self)




    def clock_expr(self):

        localctx = testParser.Clock_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_clock_expr)
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(testParser.ID)
                pass
            elif token in [testParser.NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.match(testParser.NOT)
                self.state = 780
                self.match(testParser.ID)
                pass
            elif token in [testParser.LPAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 781
                self.match(testParser.LPAREN)
                self.state = 782
                self.match(testParser.ID)
                self.state = 783
                self.match(testParser.MATCH)
                self.state = 784
                self.pattern()
                self.state = 785
                self.match(testParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expr(self):
            return self.getTypedRuleContext(testParser.Id_exprContext,0)


        def atom(self):
            return self.getTypedRuleContext(testParser.AtomContext,0)


        def list_expr(self):
            return self.getTypedRuleContext(testParser.List_exprContext,0)


        def tempo_expr(self):
            return self.getTypedRuleContext(testParser.Tempo_exprContext,0)


        def bool_expr(self):
            return self.getTypedRuleContext(testParser.Bool_exprContext,0)


        def arith_expr(self):
            return self.getTypedRuleContext(testParser.Arith_exprContext,0)


        def array_expr(self):
            return self.getTypedRuleContext(testParser.Array_exprContext,0)


        def struct_expr(self):
            return self.getTypedRuleContext(testParser.Struct_exprContext,0)


        def mixed_constructor(self):
            return self.getTypedRuleContext(testParser.Mixed_constructorContext,0)


        def switch_expr(self):
            return self.getTypedRuleContext(testParser.Switch_exprContext,0)


        def apply_expr(self):
            return self.getTypedRuleContext(testParser.Apply_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ExprContext)
            else:
                return self.getTypedRuleContext(testParser.ExprContext,i)


        def AT(self):
            return self.getToken(testParser.AT, 0)

        def CIRCUMFLEX(self):
            return self.getToken(testParser.CIRCUMFLEX, 0)

        def bin_op(self):
            return self.getTypedRuleContext(testParser.Bin_opContext,0)


        def ARROW(self):
            return self.getToken(testParser.ARROW, 0)

        def TIMES(self):
            return self.getToken(testParser.TIMES, 0)

        def DOT(self):
            return self.getToken(testParser.DOT, 0)

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def index(self):
            return self.getTypedRuleContext(testParser.IndexContext,0)


        def LBRACK(self):
            return self.getToken(testParser.LBRACK, 0)

        def ELLIPSIS(self):
            return self.getToken(testParser.ELLIPSIS, 0)

        def RBRACK(self):
            return self.getToken(testParser.RBRACK, 0)

        def WHEN(self):
            return self.getToken(testParser.WHEN, 0)

        def clock_expr(self):
            return self.getTypedRuleContext(testParser.Clock_exprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = testParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 790
                self.id_expr()
                pass

            elif la_ == 2:
                self.state = 791
                self.atom()
                pass

            elif la_ == 3:
                self.state = 792
                self.list_expr()
                pass

            elif la_ == 4:
                self.state = 793
                self.tempo_expr()
                pass

            elif la_ == 5:
                self.state = 794
                self.bool_expr()
                pass

            elif la_ == 6:
                self.state = 795
                self.arith_expr()
                pass

            elif la_ == 7:
                self.state = 796
                self.array_expr()
                pass

            elif la_ == 8:
                self.state = 797
                self.struct_expr()
                pass

            elif la_ == 9:
                self.state = 798
                self.mixed_constructor()
                pass

            elif la_ == 10:
                self.state = 799
                self.switch_expr()
                pass

            elif la_ == 11:
                self.state = 800
                self.apply_expr()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 834
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 803
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 804
                        self.match(testParser.AT)
                        self.state = 805
                        self.expr(18)
                        pass

                    elif la_ == 2:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 806
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 807
                        self.match(testParser.CIRCUMFLEX)
                        self.state = 808
                        self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 809
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 810
                        self.bin_op()
                        self.state = 811
                        self.expr(15)
                        pass

                    elif la_ == 4:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 813
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 814
                        self.match(testParser.ARROW)
                        self.state = 815
                        self.expr(14)
                        pass

                    elif la_ == 5:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 816
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 817
                        self.match(testParser.TIMES)
                        self.state = 818
                        self.expr(13)
                        pass

                    elif la_ == 6:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 819
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 820
                        self.match(testParser.DOT)
                        self.state = 821
                        self.match(testParser.ID)
                        pass

                    elif la_ == 7:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 822
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 823
                        self.index()
                        pass

                    elif la_ == 8:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 824
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 825
                        self.match(testParser.LBRACK)
                        self.state = 826
                        self.expr(0)
                        self.state = 827
                        self.match(testParser.ELLIPSIS)
                        self.state = 828
                        self.expr(0)
                        self.state = 829
                        self.match(testParser.RBRACK)
                        pass

                    elif la_ == 9:
                        localctx = testParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 831
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 832
                        self.match(testParser.WHEN)
                        self.state = 833
                        self.clock_expr()
                        pass

             
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean(self):
            return self.getTypedRuleContext(testParser.BooleanContext,0)


        def integer(self):
            return self.getTypedRuleContext(testParser.IntegerContext,0)


        def MINUS(self):
            return self.getToken(testParser.MINUS, 0)

        def DOUBLE(self):
            return self.getToken(testParser.DOUBLE, 0)

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def typevar(self):
            return self.getTypedRuleContext(testParser.TypevarContext,0)


        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def character(self):
            return self.getTypedRuleContext(testParser.CharacterContext,0)


        def getRuleIndex(self):
            return testParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = testParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.TRUE, testParser.FALSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.boolean()
                pass
            elif token in [testParser.MINUS, testParser.DECIMAL_INTEGER, testParser.OCT_INTEGER, testParser.HEX_INTEGER, testParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==testParser.MINUS:
                    self.state = 840
                    self.match(testParser.MINUS)


                self.state = 843
                self.integer()
                pass
            elif token in [testParser.DOUBLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 844
                self.match(testParser.DOUBLE)
                pass
            elif token in [testParser.LPAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 845
                self.match(testParser.LPAREN)
                self.state = 846
                self.integer()
                self.state = 847
                self.match(testParser.COLON)
                self.state = 848
                self.typevar()
                self.state = 849
                self.match(testParser.RPAREN)
                pass
            elif token in [testParser.T__0]:
                self.enterOuterAlt(localctx, 5)
                self.state = 851
                self.character()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def path_id(self):
            return self.getTypedRuleContext(testParser.Path_idContext,0)


        def LAST(self):
            return self.getToken(testParser.LAST, 0)

        def getRuleIndex(self):
            return testParser.RULE_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expr" ):
                listener.enterId_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expr" ):
                listener.exitId_expr(self)




    def id_expr(self):

        localctx = testParser.Id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_id_expr)
        try:
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.match(testParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.path_id()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.match(testParser.LAST)
                self.state = 857
                self.match(testParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def mylist(self):
            return self.getTypedRuleContext(testParser.MylistContext,0)


        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def getRuleIndex(self):
            return testParser.RULE_list_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_expr" ):
                listener.enterList_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_expr" ):
                listener.exitList_expr(self)




    def list_expr(self):

        localctx = testParser.List_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_list_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(testParser.LPAREN)
            self.state = 861
            self.mylist()
            self.state = 862
            self.match(testParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MylistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ExprContext)
            else:
                return self.getTypedRuleContext(testParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_mylist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMylist" ):
                listener.enterMylist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMylist" ):
                listener.exitMylist(self)




    def mylist(self):

        localctx = testParser.MylistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_mylist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (testParser.T__0 - 1)) | (1 << (testParser.PREFIXOP - 1)) | (1 << (testParser.REVERSE - 1)) | (1 << (testParser.TRANSPOSE - 1)) | (1 << (testParser.LNOT - 1)) | (1 << (testParser.PRE - 1)) | (1 << (testParser.FBY - 1)) | (1 << (testParser.MERGE - 1)) | (1 << (testParser.LAST - 1)) | (1 << (testParser.IF - 1)))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (testParser.NOT - 76)) | (1 << (testParser.TRUE - 76)) | (1 << (testParser.FALSE - 76)) | (1 << (testParser.MINUS - 76)) | (1 << (testParser.ADD - 76)) | (1 << (testParser.SHARP - 76)) | (1 << (testParser.OPEN_BRACE - 76)) | (1 << (testParser.LPAREN - 76)) | (1 << (testParser.LBRACK - 76)) | (1 << (testParser.DECIMAL_INTEGER - 76)) | (1 << (testParser.OCT_INTEGER - 76)) | (1 << (testParser.HEX_INTEGER - 76)) | (1 << (testParser.BIN_INTEGER - 76)) | (1 << (testParser.DOUBLE - 76)) | (1 << (testParser.ID - 76)))) != 0):
                self.state = 864
                self.expr(0)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.COMMA:
                    self.state = 865
                    self.match(testParser.COMMA)
                    self.state = 866
                    self.expr(0)
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tempo_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRE(self):
            return self.getToken(testParser.PRE, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def FBY(self):
            return self.getToken(testParser.FBY, 0)

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def mylist(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.MylistContext)
            else:
                return self.getTypedRuleContext(testParser.MylistContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def MERGE(self):
            return self.getToken(testParser.MERGE, 0)

        def getRuleIndex(self):
            return testParser.RULE_tempo_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTempo_expr" ):
                listener.enterTempo_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTempo_expr" ):
                listener.exitTempo_expr(self)




    def tempo_expr(self):

        localctx = testParser.Tempo_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tempo_expr)
        self._la = 0 # Token type
        try:
            self.state = 899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.PRE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(testParser.PRE)
                self.state = 875
                self.expr(0)
                pass
            elif token in [testParser.FBY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.match(testParser.FBY)
                self.state = 877
                self.match(testParser.LPAREN)
                self.state = 878
                self.mylist()
                self.state = 879
                self.match(testParser.SEMI)
                self.state = 880
                self.expr(0)
                self.state = 881
                self.match(testParser.SEMI)
                self.state = 882
                self.mylist()
                self.state = 883
                self.match(testParser.RPAREN)
                pass
            elif token in [testParser.MERGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 885
                self.match(testParser.MERGE)
                self.state = 886
                self.match(testParser.LPAREN)
                self.state = 887
                self.expr(0)
                self.state = 888
                self.match(testParser.SEMI)
                self.state = 889
                self.mylist()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==testParser.SEMI:
                    self.state = 890
                    self.match(testParser.SEMI)
                    self.state = 891
                    self.mylist()
                    self.state = 896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 897
                self.match(testParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_arith_op(self):
            return self.getTypedRuleContext(testParser.Unary_arith_opContext,0)


        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def type_expr(self):
            return self.getTypedRuleContext(testParser.Type_exprContext,0)


        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def getRuleIndex(self):
            return testParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = testParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_arith_expr)
        try:
            self.state = 910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.LNOT, testParser.MINUS, testParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 901
                self.unary_arith_op()
                self.state = 902
                self.expr(0)
                pass
            elif token in [testParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self.match(testParser.LPAREN)
                self.state = 905
                self.expr(0)
                self.state = 906
                self.match(testParser.COLON)
                self.state = 907
                self.type_expr(0)
                self.state = 908
                self.match(testParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_arith_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LNOT(self):
            return self.getToken(testParser.LNOT, 0)

        def MINUS(self):
            return self.getToken(testParser.MINUS, 0)

        def ADD(self):
            return self.getToken(testParser.ADD, 0)

        def getRuleIndex(self):
            return testParser.RULE_unary_arith_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_arith_op" ):
                listener.enterUnary_arith_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_arith_op" ):
                listener.exitUnary_arith_op(self)




    def unary_arith_op(self):

        localctx = testParser.Unary_arith_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_unary_arith_op)
        self._la = 0 # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.LNOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.match(testParser.LNOT)
                pass
            elif token in [testParser.MINUS, testParser.ADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                _la = self._input.LA(1)
                if not(_la==testParser.MINUS or _la==testParser.ADD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bin_arith_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(testParser.STAR, 0)

        def DIV(self):
            return self.getToken(testParser.DIV, 0)

        def MOD(self):
            return self.getToken(testParser.MOD, 0)

        def IDIV(self):
            return self.getToken(testParser.IDIV, 0)

        def ADD(self):
            return self.getToken(testParser.ADD, 0)

        def MINUS(self):
            return self.getToken(testParser.MINUS, 0)

        def LSL(self):
            return self.getToken(testParser.LSL, 0)

        def LSR(self):
            return self.getToken(testParser.LSR, 0)

        def getRuleIndex(self):
            return testParser.RULE_bin_arith_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBin_arith_op" ):
                listener.enterBin_arith_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBin_arith_op" ):
                listener.exitBin_arith_op(self)




    def bin_arith_op(self):

        localctx = testParser.Bin_arith_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_bin_arith_op)
        self._la = 0 # Token type
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.STAR, testParser.DIV, testParser.MOD, testParser.IDIV]:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                _la = self._input.LA(1)
                if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (testParser.STAR - 97)) | (1 << (testParser.DIV - 97)) | (1 << (testParser.MOD - 97)) | (1 << (testParser.IDIV - 97)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.MINUS, testParser.ADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                _la = self._input.LA(1)
                if not(_la==testParser.MINUS or _la==testParser.ADD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.LSL, testParser.LSR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                _la = self._input.LA(1)
                if not(_la==testParser.LSL or _la==testParser.LSR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ExprContext)
            else:
                return self.getTypedRuleContext(testParser.ExprContext,i)


        def bin_relation_op(self):
            return self.getTypedRuleContext(testParser.Bin_relation_opContext,0)


        def getRuleIndex(self):
            return testParser.RULE_relation_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_expr" ):
                listener.enterRelation_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_expr" ):
                listener.exitRelation_expr(self)




    def relation_expr(self):

        localctx = testParser.Relation_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_relation_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.expr(0)
            self.state = 922
            self.bin_relation_op()
            self.state = 923
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bin_relation_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(testParser.EQUALS, 0)

        def NOT_EQ(self):
            return self.getToken(testParser.NOT_EQ, 0)

        def LESS_THAN(self):
            return self.getToken(testParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(testParser.GREATER_THAN, 0)

        def LT_EQ(self):
            return self.getToken(testParser.LT_EQ, 0)

        def GT_EQ(self):
            return self.getToken(testParser.GT_EQ, 0)

        def getRuleIndex(self):
            return testParser.RULE_bin_relation_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBin_relation_op" ):
                listener.enterBin_relation_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBin_relation_op" ):
                listener.exitBin_relation_op(self)




    def bin_relation_op(self):

        localctx = testParser.Bin_relation_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_bin_relation_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            _la = self._input.LA(1)
            if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (testParser.LESS_THAN - 103)) | (1 << (testParser.GREATER_THAN - 103)) | (1 << (testParser.EQUALS - 103)) | (1 << (testParser.GT_EQ - 103)) | (1 << (testParser.LT_EQ - 103)) | (1 << (testParser.NOT_EQ - 103)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(testParser.NOT, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def SHARP(self):
            return self.getToken(testParser.SHARP, 0)

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def mylist(self):
            return self.getTypedRuleContext(testParser.MylistContext,0)


        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def getRuleIndex(self):
            return testParser.RULE_bool_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_expr" ):
                listener.enterBool_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_expr" ):
                listener.exitBool_expr(self)




    def bool_expr(self):

        localctx = testParser.Bool_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_bool_expr)
        try:
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.match(testParser.NOT)
                self.state = 928
                self.expr(0)
                pass
            elif token in [testParser.SHARP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self.match(testParser.SHARP)
                self.state = 930
                self.match(testParser.LPAREN)
                self.state = 931
                self.mylist()
                self.state = 932
                self.match(testParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bin_bool_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(testParser.AND, 0)

        def OR(self):
            return self.getToken(testParser.OR, 0)

        def XOR(self):
            return self.getToken(testParser.XOR, 0)

        def LAND(self):
            return self.getToken(testParser.LAND, 0)

        def LOR(self):
            return self.getToken(testParser.LOR, 0)

        def LXOR(self):
            return self.getToken(testParser.LXOR, 0)

        def getRuleIndex(self):
            return testParser.RULE_bin_bool_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBin_bool_op" ):
                listener.enterBin_bool_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBin_bool_op" ):
                listener.exitBin_bool_op(self)




    def bin_bool_op(self):

        localctx = testParser.Bin_bool_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_bin_bool_op)
        self._la = 0 # Token type
        try:
            self.state = 940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.match(testParser.AND)
                pass
            elif token in [testParser.OR, testParser.XOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                _la = self._input.LA(1)
                if not(_la==testParser.OR or _la==testParser.XOR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.LAND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 938
                self.match(testParser.LAND)
                pass
            elif token in [testParser.LOR, testParser.LXOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 939
                _la = self._input.LA(1)
                if not(_la==testParser.LOR or _la==testParser.LXOR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bin_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(testParser.STAR, 0)

        def DIV(self):
            return self.getToken(testParser.DIV, 0)

        def MOD(self):
            return self.getToken(testParser.MOD, 0)

        def IDIV(self):
            return self.getToken(testParser.IDIV, 0)

        def ADD(self):
            return self.getToken(testParser.ADD, 0)

        def MINUS(self):
            return self.getToken(testParser.MINUS, 0)

        def LSL(self):
            return self.getToken(testParser.LSL, 0)

        def LSR(self):
            return self.getToken(testParser.LSR, 0)

        def EQUALS(self):
            return self.getToken(testParser.EQUALS, 0)

        def NOT_EQ(self):
            return self.getToken(testParser.NOT_EQ, 0)

        def LESS_THAN(self):
            return self.getToken(testParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(testParser.GREATER_THAN, 0)

        def LT_EQ(self):
            return self.getToken(testParser.LT_EQ, 0)

        def GT_EQ(self):
            return self.getToken(testParser.GT_EQ, 0)

        def AND(self):
            return self.getToken(testParser.AND, 0)

        def OR(self):
            return self.getToken(testParser.OR, 0)

        def XOR(self):
            return self.getToken(testParser.XOR, 0)

        def LAND(self):
            return self.getToken(testParser.LAND, 0)

        def LOR(self):
            return self.getToken(testParser.LOR, 0)

        def LXOR(self):
            return self.getToken(testParser.LXOR, 0)

        def getRuleIndex(self):
            return testParser.RULE_bin_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBin_op" ):
                listener.enterBin_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBin_op" ):
                listener.exitBin_op(self)




    def bin_op(self):

        localctx = testParser.Bin_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_bin_op)
        self._la = 0 # Token type
        try:
            self.state = 950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.STAR, testParser.DIV, testParser.MOD, testParser.IDIV]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                _la = self._input.LA(1)
                if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (testParser.STAR - 97)) | (1 << (testParser.DIV - 97)) | (1 << (testParser.MOD - 97)) | (1 << (testParser.IDIV - 97)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.MINUS, testParser.ADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                _la = self._input.LA(1)
                if not(_la==testParser.MINUS or _la==testParser.ADD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.LSL, testParser.LSR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 944
                _la = self._input.LA(1)
                if not(_la==testParser.LSL or _la==testParser.LSR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.LESS_THAN, testParser.GREATER_THAN, testParser.EQUALS, testParser.GT_EQ, testParser.LT_EQ, testParser.NOT_EQ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 945
                _la = self._input.LA(1)
                if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (testParser.LESS_THAN - 103)) | (1 << (testParser.GREATER_THAN - 103)) | (1 << (testParser.EQUALS - 103)) | (1 << (testParser.GT_EQ - 103)) | (1 << (testParser.LT_EQ - 103)) | (1 << (testParser.NOT_EQ - 103)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.AND]:
                self.enterOuterAlt(localctx, 5)
                self.state = 946
                self.match(testParser.AND)
                pass
            elif token in [testParser.OR, testParser.XOR]:
                self.enterOuterAlt(localctx, 6)
                self.state = 947
                _la = self._input.LA(1)
                if not(_la==testParser.OR or _la==testParser.XOR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.LAND]:
                self.enterOuterAlt(localctx, 7)
                self.state = 948
                self.match(testParser.LAND)
                pass
            elif token in [testParser.LOR, testParser.LXOR]:
                self.enterOuterAlt(localctx, 8)
                self.state = 949
                _la = self._input.LA(1)
                if not(_la==testParser.LOR or _la==testParser.LXOR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVERSE(self):
            return self.getToken(testParser.REVERSE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ExprContext)
            else:
                return self.getTypedRuleContext(testParser.ExprContext,i)


        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def DOT(self):
            return self.getToken(testParser.DOT, 0)

        def DEFAULT(self):
            return self.getToken(testParser.DEFAULT, 0)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def label_or_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Label_or_indexContext)
            else:
                return self.getTypedRuleContext(testParser.Label_or_indexContext,i)


        def TRANSPOSE(self):
            return self.getToken(testParser.TRANSPOSE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.SEMI)
            else:
                return self.getToken(testParser.SEMI, i)

        def integer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.IntegerContext)
            else:
                return self.getTypedRuleContext(testParser.IntegerContext,i)


        def LBRACK(self):
            return self.getToken(testParser.LBRACK, 0)

        def mylist(self):
            return self.getTypedRuleContext(testParser.MylistContext,0)


        def RBRACK(self):
            return self.getToken(testParser.RBRACK, 0)

        def getRuleIndex(self):
            return testParser.RULE_array_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_expr" ):
                listener.enterArray_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_expr" ):
                listener.exitArray_expr(self)




    def array_expr(self):

        localctx = testParser.Array_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_array_expr)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.REVERSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.match(testParser.REVERSE)
                self.state = 953
                self.expr(0)
                pass
            elif token in [testParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.match(testParser.LPAREN)
                self.state = 955
                self.expr(0)
                self.state = 956
                self.match(testParser.DOT)
                self.state = 958 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 957
                    self.label_or_index()
                    self.state = 960 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==testParser.DOT or _la==testParser.LBRACK):
                        break

                self.state = 962
                self.match(testParser.DEFAULT)
                self.state = 963
                self.expr(0)
                self.state = 964
                self.match(testParser.RPAREN)
                pass
            elif token in [testParser.TRANSPOSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 966
                self.match(testParser.TRANSPOSE)
                self.state = 967
                self.match(testParser.LPAREN)
                self.state = 968
                self.expr(0)
                self.state = 969
                self.match(testParser.SEMI)
                self.state = 970
                self.integer()
                self.state = 971
                self.match(testParser.SEMI)
                self.state = 972
                self.integer()
                self.state = 973
                self.match(testParser.RPAREN)
                pass
            elif token in [testParser.LBRACK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 975
                self.match(testParser.LBRACK)
                self.state = 976
                self.mylist()
                self.state = 977
                self.match(testParser.RBRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(testParser.OPEN_BRACE, 0)

        def label_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Label_exprContext)
            else:
                return self.getTypedRuleContext(testParser.Label_exprContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(testParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def getRuleIndex(self):
            return testParser.RULE_struct_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_expr" ):
                listener.enterStruct_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_expr" ):
                listener.exitStruct_expr(self)




    def struct_expr(self):

        localctx = testParser.Struct_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_struct_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(testParser.OPEN_BRACE)
            self.state = 982
            self.label_expr()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==testParser.COMMA:
                self.state = 983
                self.match(testParser.COMMA)
                self.state = 984
                self.label_expr()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self.match(testParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mixed_constructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ExprContext)
            else:
                return self.getTypedRuleContext(testParser.ExprContext,i)


        def WITH(self):
            return self.getToken(testParser.WITH, 0)

        def ASSIGN(self):
            return self.getToken(testParser.ASSIGN, 0)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def label_or_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Label_or_indexContext)
            else:
                return self.getTypedRuleContext(testParser.Label_or_indexContext,i)


        def getRuleIndex(self):
            return testParser.RULE_mixed_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_constructor" ):
                listener.enterMixed_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_constructor" ):
                listener.exitMixed_constructor(self)




    def mixed_constructor(self):

        localctx = testParser.Mixed_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_mixed_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(testParser.LPAREN)
            self.state = 993
            self.expr(0)
            self.state = 994
            self.match(testParser.WITH)
            self.state = 996 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 995
                self.label_or_index()
                self.state = 998 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==testParser.DOT or _la==testParser.LBRACK):
                    break

            self.state = 1000
            self.match(testParser.ASSIGN)
            self.state = 1001
            self.expr(0)
            self.state = 1002
            self.match(testParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_label_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_expr" ):
                listener.enterLabel_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_expr" ):
                listener.exitLabel_expr(self)




    def label_expr(self):

        localctx = testParser.Label_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_label_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(testParser.ID)
            self.state = 1005
            self.match(testParser.COLON)
            self.state = 1006
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(testParser.LBRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def RBRACK(self):
            return self.getToken(testParser.RBRACK, 0)

        def getRuleIndex(self):
            return testParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)




    def index(self):

        localctx = testParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(testParser.LBRACK)
            self.state = 1009
            self.expr(0)
            self.state = 1010
            self.match(testParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_or_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(testParser.DOT, 0)

        def ID(self):
            return self.getToken(testParser.ID, 0)

        def index(self):
            return self.getTypedRuleContext(testParser.IndexContext,0)


        def getRuleIndex(self):
            return testParser.RULE_label_or_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_or_index" ):
                listener.enterLabel_or_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_or_index" ):
                listener.exitLabel_or_index(self)




    def label_or_index(self):

        localctx = testParser.Label_or_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_label_or_index)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1012
                self.match(testParser.DOT)
                self.state = 1013
                self.match(testParser.ID)
                pass
            elif token in [testParser.LBRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                self.index()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(testParser.IF, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ExprContext)
            else:
                return self.getTypedRuleContext(testParser.ExprContext,i)


        def THEN(self):
            return self.getToken(testParser.THEN, 0)

        def ELSE(self):
            return self.getToken(testParser.ELSE, 0)

        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def CASE(self):
            return self.getToken(testParser.CASE, 0)

        def OF(self):
            return self.getToken(testParser.OF, 0)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def case_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.Case_exprContext)
            else:
                return self.getTypedRuleContext(testParser.Case_exprContext,i)


        def getRuleIndex(self):
            return testParser.RULE_switch_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expr" ):
                listener.enterSwitch_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expr" ):
                listener.exitSwitch_expr(self)




    def switch_expr(self):

        localctx = testParser.Switch_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_switch_expr)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.match(testParser.IF)
                self.state = 1018
                self.expr(0)
                self.state = 1019
                self.match(testParser.THEN)
                self.state = 1020
                self.expr(0)
                self.state = 1021
                self.match(testParser.ELSE)
                self.state = 1022
                self.expr(0)
                pass
            elif token in [testParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1024
                self.match(testParser.LPAREN)
                self.state = 1025
                self.match(testParser.CASE)
                self.state = 1026
                self.expr(0)
                self.state = 1027
                self.match(testParser.OF)
                self.state = 1029 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1028
                    self.case_expr()
                    self.state = 1031 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==testParser.OR_OP):
                        break

                self.state = 1033
                self.match(testParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_OP(self):
            return self.getToken(testParser.OR_OP, 0)

        def pattern(self):
            return self.getTypedRuleContext(testParser.PatternContext,0)


        def COLON(self):
            return self.getToken(testParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(testParser.ExprContext,0)


        def getRuleIndex(self):
            return testParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = testParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_case_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(testParser.OR_OP)
            self.state = 1038
            self.pattern()
            self.state = 1039
            self.match(testParser.COLON)
            self.state = 1040
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def path_id(self):
            return self.getTypedRuleContext(testParser.Path_idContext,0)


        def character(self):
            return self.getTypedRuleContext(testParser.CharacterContext,0)


        def LBRACK(self):
            return self.getToken(testParser.LBRACK, 0)

        def MINUS(self):
            return self.getToken(testParser.MINUS, 0)

        def RBRACK(self):
            return self.getToken(testParser.RBRACK, 0)

        def integer(self):
            return self.getTypedRuleContext(testParser.IntegerContext,0)


        def boolean(self):
            return self.getTypedRuleContext(testParser.BooleanContext,0)


        def getRuleIndex(self):
            return testParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = testParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_pattern)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.path_id()
                pass
            elif token in [testParser.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.character()
                pass
            elif token in [testParser.LBRACK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1044
                self.match(testParser.LBRACK)
                self.state = 1045
                self.match(testParser.MINUS)
                self.state = 1046
                self.match(testParser.RBRACK)
                self.state = 1047
                self.integer()
                pass
            elif token in [testParser.TRUE, testParser.FALSE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1048
                self.boolean()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Apply_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(testParser.OperatorContext,0)


        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def mylist(self):
            return self.getTypedRuleContext(testParser.MylistContext,0)


        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def getRuleIndex(self):
            return testParser.RULE_apply_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApply_expr" ):
                listener.enterApply_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApply_expr" ):
                listener.exitApply_expr(self)




    def apply_expr(self):

        localctx = testParser.Apply_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_apply_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.operator()
            self.state = 1052
            self.match(testParser.LPAREN)
            self.state = 1053
            self.mylist()
            self.state = 1054
            self.match(testParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefix(self):
            return self.getTypedRuleContext(testParser.PrefixContext,0)


        def LPAREN(self):
            return self.getToken(testParser.LPAREN, 0)

        def LDLT(self):
            return self.getToken(testParser.LDLT, 0)

        def RDGT(self):
            return self.getToken(testParser.RDGT, 0)

        def RPAREN(self):
            return self.getToken(testParser.RPAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(testParser.ExprContext)
            else:
                return self.getTypedRuleContext(testParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(testParser.COMMA)
            else:
                return self.getToken(testParser.COMMA, i)

        def MAKE(self):
            return self.getToken(testParser.MAKE, 0)

        def path_id(self):
            return self.getTypedRuleContext(testParser.Path_idContext,0)


        def FLATTEN(self):
            return self.getToken(testParser.FLATTEN, 0)

        def iterator(self):
            return self.getTypedRuleContext(testParser.IteratorContext,0)


        def operator(self):
            return self.getTypedRuleContext(testParser.OperatorContext,0)


        def ACTIVATE(self):
            return self.getToken(testParser.ACTIVATE, 0)

        def EVERY(self):
            return self.getToken(testParser.EVERY, 0)

        def clock_expr(self):
            return self.getTypedRuleContext(testParser.Clock_exprContext,0)


        def DEFAULT(self):
            return self.getToken(testParser.DEFAULT, 0)

        def INITIAL(self):
            return self.getToken(testParser.INITIAL, 0)

        def RESTART(self):
            return self.getToken(testParser.RESTART, 0)

        def iterator_mw(self):
            return self.getTypedRuleContext(testParser.Iterator_mwContext,0)


        def IF(self):
            return self.getToken(testParser.IF, 0)

        def FOLDW(self):
            return self.getToken(testParser.FOLDW, 0)

        def FOLDWI(self):
            return self.getToken(testParser.FOLDWI, 0)

        def getRuleIndex(self):
            return testParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = testParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                self.prefix()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1057
                self.match(testParser.LPAREN)
                self.state = 1058
                self.prefix()
                self.state = 1059
                self.match(testParser.LDLT)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (testParser.T__0 - 1)) | (1 << (testParser.PREFIXOP - 1)) | (1 << (testParser.REVERSE - 1)) | (1 << (testParser.TRANSPOSE - 1)) | (1 << (testParser.LNOT - 1)) | (1 << (testParser.PRE - 1)) | (1 << (testParser.FBY - 1)) | (1 << (testParser.MERGE - 1)) | (1 << (testParser.LAST - 1)) | (1 << (testParser.IF - 1)))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (testParser.NOT - 76)) | (1 << (testParser.TRUE - 76)) | (1 << (testParser.FALSE - 76)) | (1 << (testParser.MINUS - 76)) | (1 << (testParser.ADD - 76)) | (1 << (testParser.SHARP - 76)) | (1 << (testParser.OPEN_BRACE - 76)) | (1 << (testParser.LPAREN - 76)) | (1 << (testParser.LBRACK - 76)) | (1 << (testParser.DECIMAL_INTEGER - 76)) | (1 << (testParser.OCT_INTEGER - 76)) | (1 << (testParser.HEX_INTEGER - 76)) | (1 << (testParser.BIN_INTEGER - 76)) | (1 << (testParser.DOUBLE - 76)) | (1 << (testParser.ID - 76)))) != 0):
                    self.state = 1060
                    self.expr(0)
                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==testParser.COMMA:
                        self.state = 1061
                        self.match(testParser.COMMA)
                        self.state = 1062
                        self.expr(0)
                        self.state = 1067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1070
                self.match(testParser.RDGT)
                self.state = 1071
                self.match(testParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1073
                self.match(testParser.LPAREN)
                self.state = 1074
                self.match(testParser.MAKE)
                self.state = 1075
                self.path_id()
                self.state = 1076
                self.match(testParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1078
                self.match(testParser.LPAREN)
                self.state = 1079
                self.match(testParser.FLATTEN)
                self.state = 1080
                self.path_id()
                self.state = 1081
                self.match(testParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1083
                self.match(testParser.LPAREN)
                self.state = 1084
                self.iterator()
                self.state = 1085
                self.operator()
                self.state = 1086
                self.match(testParser.LDLT)
                self.state = 1087
                self.expr(0)
                self.state = 1088
                self.match(testParser.RDGT)
                self.state = 1089
                self.match(testParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1091
                self.match(testParser.LPAREN)
                self.state = 1092
                self.match(testParser.ACTIVATE)
                self.state = 1093
                self.operator()
                self.state = 1094
                self.match(testParser.EVERY)
                self.state = 1095
                self.clock_expr()
                self.state = 1096
                self.match(testParser.RPAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1098
                self.match(testParser.LPAREN)
                self.state = 1099
                self.match(testParser.ACTIVATE)
                self.state = 1100
                self.operator()
                self.state = 1101
                self.match(testParser.EVERY)
                self.state = 1102
                self.expr(0)
                self.state = 1103
                self.match(testParser.DEFAULT)
                self.state = 1104
                self.expr(0)
                self.state = 1105
                self.match(testParser.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1107
                self.match(testParser.LPAREN)
                self.state = 1108
                self.match(testParser.ACTIVATE)
                self.state = 1109
                self.operator()
                self.state = 1110
                self.match(testParser.EVERY)
                self.state = 1111
                self.expr(0)
                self.state = 1112
                self.match(testParser.INITIAL)
                self.state = 1113
                self.match(testParser.DEFAULT)
                self.state = 1114
                self.expr(0)
                self.state = 1115
                self.match(testParser.RPAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1117
                self.match(testParser.LPAREN)
                self.state = 1118
                self.match(testParser.RESTART)
                self.state = 1119
                self.operator()
                self.state = 1120
                self.match(testParser.EVERY)
                self.state = 1121
                self.expr(0)
                self.state = 1122
                self.match(testParser.RPAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1124
                self.match(testParser.LPAREN)
                self.state = 1125
                self.iterator_mw()
                self.state = 1126
                self.operator()
                self.state = 1127
                self.match(testParser.LDLT)
                self.state = 1128
                self.expr(0)
                self.state = 1129
                self.match(testParser.RDGT)
                self.state = 1130
                self.match(testParser.IF)
                self.state = 1131
                self.expr(0)
                self.state = 1132
                self.match(testParser.DEFAULT)
                self.state = 1133
                self.expr(0)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1135
                self.match(testParser.LPAREN)
                self.state = 1136
                self.match(testParser.FOLDW)
                self.state = 1137
                self.operator()
                self.state = 1138
                self.match(testParser.LDLT)
                self.state = 1139
                self.expr(0)
                self.state = 1140
                self.match(testParser.RDGT)
                self.state = 1141
                self.match(testParser.IF)
                self.state = 1142
                self.expr(0)
                self.state = 1143
                self.match(testParser.RPAREN)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1145
                self.match(testParser.LPAREN)
                self.state = 1146
                self.match(testParser.FOLDWI)
                self.state = 1147
                self.operator()
                self.state = 1148
                self.match(testParser.LDLT)
                self.state = 1149
                self.expr(0)
                self.state = 1150
                self.match(testParser.RDGT)
                self.state = 1151
                self.match(testParser.IF)
                self.state = 1152
                self.expr(0)
                self.state = 1153
                self.match(testParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def path_id(self):
            return self.getTypedRuleContext(testParser.Path_idContext,0)


        def PREFIXOP(self):
            return self.getToken(testParser.PREFIXOP, 0)

        def getRuleIndex(self):
            return testParser.RULE_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix" ):
                listener.enterPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix" ):
                listener.exitPrefix(self)




    def prefix(self):

        localctx = testParser.PrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_prefix)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.path_id()
                pass
            elif token in [testParser.PREFIXOP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.match(testParser.PREFIXOP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(testParser.MAP, 0)

        def FOLD(self):
            return self.getToken(testParser.FOLD, 0)

        def MAPI(self):
            return self.getToken(testParser.MAPI, 0)

        def FOLDI(self):
            return self.getToken(testParser.FOLDI, 0)

        def MAPFOLD(self):
            return self.getToken(testParser.MAPFOLD, 0)

        def integer(self):
            return self.getTypedRuleContext(testParser.IntegerContext,0)


        def MAPFOLDI(self):
            return self.getToken(testParser.MAPFOLDI, 0)

        def getRuleIndex(self):
            return testParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)




    def iterator(self):

        localctx = testParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.MAP, testParser.MAPI, testParser.FOLD, testParser.FOLDI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << testParser.MAP) | (1 << testParser.MAPI) | (1 << testParser.FOLD) | (1 << testParser.FOLDI))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.MAPFOLD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.match(testParser.MAPFOLD)
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (testParser.DECIMAL_INTEGER - 129)) | (1 << (testParser.OCT_INTEGER - 129)) | (1 << (testParser.HEX_INTEGER - 129)) | (1 << (testParser.BIN_INTEGER - 129)))) != 0):
                    self.state = 1163
                    self.integer()


                pass
            elif token in [testParser.MAPFOLDI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1166
                self.match(testParser.MAPFOLDI)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (testParser.DECIMAL_INTEGER - 129)) | (1 << (testParser.OCT_INTEGER - 129)) | (1 << (testParser.HEX_INTEGER - 129)) | (1 << (testParser.BIN_INTEGER - 129)))) != 0):
                    self.state = 1167
                    self.integer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Iterator_mwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPW(self):
            return self.getToken(testParser.MAPW, 0)

        def MAPWI(self):
            return self.getToken(testParser.MAPWI, 0)

        def MAPFOLDW(self):
            return self.getToken(testParser.MAPFOLDW, 0)

        def integer(self):
            return self.getTypedRuleContext(testParser.IntegerContext,0)


        def MAPFOLDWI(self):
            return self.getToken(testParser.MAPFOLDWI, 0)

        def getRuleIndex(self):
            return testParser.RULE_iterator_mw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator_mw" ):
                listener.enterIterator_mw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator_mw" ):
                listener.exitIterator_mw(self)




    def iterator_mw(self):

        localctx = testParser.Iterator_mwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_iterator_mw)
        self._la = 0 # Token type
        try:
            self.state = 1181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [testParser.MAPW, testParser.MAPWI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                _la = self._input.LA(1)
                if not(_la==testParser.MAPW or _la==testParser.MAPWI):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [testParser.MAPFOLDW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.match(testParser.MAPFOLDW)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (testParser.DECIMAL_INTEGER - 129)) | (1 << (testParser.OCT_INTEGER - 129)) | (1 << (testParser.HEX_INTEGER - 129)) | (1 << (testParser.BIN_INTEGER - 129)))) != 0):
                    self.state = 1174
                    self.integer()


                pass
            elif token in [testParser.MAPFOLDWI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1177
                self.match(testParser.MAPFOLDWI)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (testParser.DECIMAL_INTEGER - 129)) | (1 << (testParser.OCT_INTEGER - 129)) | (1 << (testParser.HEX_INTEGER - 129)) | (1 << (testParser.BIN_INTEGER - 129)))) != 0):
                    self.state = 1178
                    self.integer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(testParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(testParser.FALSE, 0)

        def getRuleIndex(self):
            return testParser.RULE_boolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean" ):
                listener.enterBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean" ):
                listener.exitBoolean(self)




    def boolean(self):

        localctx = testParser.BooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_boolean)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            _la = self._input.LA(1)
            if not(_la==testParser.TRUE or _la==testParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCT_INTEGER(self):
            return self.getToken(testParser.OCT_INTEGER, 0)

        def DECIMAL_INTEGER(self):
            return self.getToken(testParser.DECIMAL_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(testParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(testParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return testParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)




    def integer(self):

        localctx = testParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            _la = self._input.LA(1)
            if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (testParser.DECIMAL_INTEGER - 129)) | (1 << (testParser.OCT_INTEGER - 129)) | (1 << (testParser.HEX_INTEGER - 129)) | (1 << (testParser.BIN_INTEGER - 129)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return testParser.RULE_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter" ):
                listener.enterCharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter" ):
                listener.exitCharacter(self)




    def character(self):

        localctx = testParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_character)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(testParser.T__0)
            self.state = 1188
            self.matchWildcard()
            self.state = 1189
            self.match(testParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[17] = self.type_expr_sempred
        self._predicates[67] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def type_expr_sempred(self, localctx:Type_exprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         




